
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":"My research is primarily in the area of software engineering and formal methods. I am interested in ensuring the reliability of parallel software via static and dynamic program analyses, model checking, and PL solutions. I am also interested in employing HPC towards the creation of scalable verification technology. My recent research investigations have been in the area of systems security, data privacy, and Blockchain.\nPrior to joining the Department of Computer Science and Engineering at IIT Delhi, I worked as a post-doctoral researcher in the Systems Verification group at the University of Oxford.\nI am associated with the VerTeCS research group@IITD and also an associated faculty member in the School for Public Policy.\n","date":1618157067,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1618157067,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"My research is primarily in the area of software engineering and formal methods. I am interested in ensuring the reliability of parallel software via static and dynamic program analyses, model checking, and PL solutions.","tags":null,"title":"Subodh Sharma","type":"authors"},{"authors":null,"categories":null,"content":" General Information Semester: II, 2021-2022 Timings: Mon/Thur 15:30-17:00 (Slot AB) TA: Tooba Khan (email: Tooba.Khan.jcs21@csia.iitd.ac.in)\nCourse Outline The main focus of this course is learn foundational concepts for assessing reliability of systems, viz., model checking. Establishing reliability of systems assume importance when they are deployed in complex and mission critical settings such as in automotives, aircrafts, pacemakers, etc. This course will introduce techniques for modeling(transformational and reactive) systems along with a comprehensive description of various tools and algorithms to verify system models against a set of correctness properties (such as safety, liveness, etc.). For a broad list of topics that will be covered in this course, please refer COL750 course plan.\nHonour Code All students are expected to follow the highest ethical standards. Collaborations and discussions are encouraged. However, all students are required to write up all solutions entirely on their own. Any collaboration, or help taken, must be declared. Students are encouraged to refer to books, papers and internet resources. They may even consult other individuals. However, the source must be clearly cited if any part of the solution (or even an idea) is taken from such a source. Failure to declare any help taken will be interpreted as academic misconduct. Copying (in whole or in part) from others is deemed cheating and those who enable this activity either deliberately or through negligence are also deemed to have cheated. Cheating is a serious academic misconduct; it will attract a summary F grade to the involved students and referral to the discplinary committee. Important Note to the Students All academic matters, doubts etc. should be cleared during the lectures/tutorials or immediately after them, in the presence of the whole class, so that the clarifications does not have to be communicated to others separately.\nIn an online semester, when quizzes are announced beforehand, make adequate back-up arrangements for power failures and lack of internet connections, and have enough time for downloading and uploading your answers. No excuses for these will be considered valid.\nAbsence in quizzes will result in 0 for that quiz. Make-up quizzes will not be given out. A more elaborate note to the students can be found here\nAttendance: The Institute requires a mandatory 75% attendance for all students, which includes time lost due to illness. However this course will require 100% attendance. Please inform the instructor if for any reason you cannot attend a class. Be warned that it will be difficult to make up if you miss classes.\nIllness: In sickness or ill-health, a Medical Certificate from the Institute Sick Bay, or a doctor from an Institute-recognised hospital is necessary, especially if you request for a make-up test. Only in the case of serious illnesses will I consider giving an extension on assignments.\nMake-up Tests: Make-up tests (minor or major exams only) will be given only when the student furnishes a valid documentation of illness for a period including the day of the exam.\nGrading Policy Quizzes: 15% Assignments: 35% Minor Exam: 20% Major Exam: 30% As per the Institute regulations, an A grade will be awarded only over 80% and no student with less than 30% will be given a passing grade.\nAn I grade will be awarded only in the case of an illness during the major exam. A make-up exam will be scheduled at the earliest, and the I grade will be converted as soon as possible. However, please do your best to ensure that you donot break a leg or otherwise fall ill during examinations. Repeat examinations are harder by tradition.\nReferences The course material will primarily drawn from the following two sources\nChristel Baier and Joost-Pieter Katoen: Principles of Model Checking (PMC) Edmund M. Clarke, Orna Grumberg, and Doron A. Peled: Model Checking (MC) For particular topics not covered in the books, I will provide separate references which may include research papers.\nClass notes and Programs developed in the class Lecture notes will be available on Moodle.\nWeek Monday Thursday Reading assignments and Supplementary material 1 Jan 3\nL1:Introduction, Modeling Jan 6\nL2:Modeling (concurrency), SPIN Read chapter 1 and 2 of PMC List of inpiring real-world applications of model-checking 2 Jan 10\nL3:Modeling (continued), SPIN Jan 6\nL4: Linear Time Properties Read chapter 3 of PMC Explore the following model checkers: Try modeling Tic-Tac-Toe in Electrum Try modeling and verifying basic snooping cache coherence protocol using Murphi model checker ","date":1640995200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1640995200,"objectID":"97d61f28275f0e3554201a648dab935f","permalink":"https://subodhvsharma.github.io/course/col750/","publishdate":"2022-01-01T00:00:00Z","relpermalink":"/course/col750/","section":"course","summary":"Sem II (2021-22)","tags":null,"title":"COL 750 Foundations of Automatic Verification","type":"book"},{"authors":null,"categories":null,"content":" General Information Semester: I, 2021-2022 Timings: Mon/Thur 09:30-11:00 TA: Abhishek rose (email: abhishek.rose@cse.iitd.ac.in), Tooba Khan (email: Tooba.Khan.jcs21@csia.iitd.ac.in)\nCourse Outline Introduction to declarative programming paradigms. The functional style of programming, paradigms of developments of functional programs, use of higher order functionals and pattern-matching. Introduction to lambda calculus. Interpreters for functional languages and abstract machines for lazy and eager lambda calculi, Types, type- checking and their relationship to logic. Logic as a system for declarative programming. The use of pattern-matching and programming of higher order functions within a logic programming framework. Introduction to symbolic processing. The use of resolution and theorem-proving techniques in logic programming. The relationship between logic programming and functional programming.\nHonour Code All students are expected to follow the highest ethical standards. Collaborations and discussions are encouraged. However, all students are required to write up all solutions entirely on their own. Any collaboration, or help taken, must be declared. Students are encouraged to refer to books, papers and internet resources. They may even consult other individuals. However, the source must be clearly cited if any part of the solution (or even an idea) is taken from such a source. Failure to declare any help taken will be interpreted as academic misconduct. Copying (in whole or in part) from others is deemed cheating and those who enable this activity either deliberately or through negligence are also deemed to have cheated. Cheating is a serious academic misconduct; it will attract a summary F grade to the involved students and referral to the discplinary committee. Important Note to the Students All academic matters, doubts etc. should be cleared during the lectures/tutorials or immediately after them, in the presence of the whole class, so that the clarifications does not have to be communicated to others separately.\nIn an online semester, when quizzes are announced beforehand, make adequate back-up arrangements for power failures and lack of internet connections, and have enough time for downloading and uploading your answers. No excuses for these will be considered valid.\nAbsence in quizzes will result in 0 for that quiz. Make-up quizzes will not be given out. A more elaborate note to the students can be found here\nAttendance: The Institute requires a mandatory 75% attendance for all students, which includes time lost due to illness. However this course will require 100% attendance. Please inform the instructor if for any reason you cannot attend a class. Be warned that it will be difficult to make up if you miss classes.\nIllness: In sickness or ill-health, a Medical Certificate from the Institute Sick Bay, or a doctor from an Institute-recognised hospital is necessary, especially if you request for a make-up test. Only in the case of serious illnesses will I consider giving an extension on assignments.\nMake-up Tests: Make-up tests (minor or major exams only) will be given only when the student furnishes a valid documentation of illness for a period including the day of the exam.\nGrading Policy Quizzes: 12% Assignments: 28% Minor Exam(s): 30% Major Exam(s): 30% As per the Institute regulations, an A grade will be awarded only over 80% and no student with less than 30% will be given a passing grade.\nAn I grade will be awarded only in the case of an illness during the major exam. A make-up exam will be scheduled at the earliest, and the I grade will be converted as soon as possible. However, please do your best to ensure that you donot break a leg or otherwise fall ill during examinations. Repeat examinations are harder by tradition.\nReferences Sethi R: Programming Languages: Concepts and Constructs, 2nd edition. S. Arun-Kumar: Lecture notes on ILFP M Spivey: An Introduction to Logic Programming through Prolog Shapiro and Sterling: The Art of Prolog. Haskell Download the compiler and interpreter Introductory books on Haskell, tutorial and other online resources Class notes and Programs developed in the class Lecture notes are available on Moodle course page.\nWeek Monday Thursday General notes 1 Aug 9\nL1:Introduction Aug 12\nRecursion, Induction proofs, Efficiency arguments Install Haskell and read on basic commands, ghci, expressions etc. . 2 Aug 16\nL3:More on recursion, tail recursion Aug 19\nL4: Scopes, Binding, Evaluation strategies Quiz 1 (ungraded; on gradescope) 3 Aug 23\nL5:Lists, Sorting, Searching Aug 26\nL6: More on Lists, Higher-order functions Assignment 1 released 4 Sept 2 L7:Higher order functions Sept 4\nL8: Datatypes and recursive dataypes 5 Sept 7\nL9:More on types: type classes, IO types Sept 9\nL10: Structural Induction 6 Sept 13\nL11:Introduction to Universal Algebra, terms, term algebra Sept 16\nL12: Quiz 2; Assignment 2 ","date":1628380800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1628380800,"objectID":"cbeab19ccd882320504a336c2df9263f","permalink":"https://subodhvsharma.github.io/course/col765/","publishdate":"2021-08-08T00:00:00Z","relpermalink":"/course/col765/","section":"course","summary":"Sem I (2021-22)","tags":null,"title":"COL 765 Introduction to Logic and Functional Programming","type":"book"},{"authors":null,"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1577836800,"objectID":"14ef100536c7aed326cbe23a7070a3da","permalink":"https://subodhvsharma.github.io/course/programming-languages/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/course/programming-languages/","section":"course","summary":"Sem II (2020-21)","tags":null,"title":"COL226 Programming Languages","type":"book"},{"authors":null,"categories":null,"content":"","date":1596240000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1596240000,"objectID":"3022ae2f9573cc8453b25f743bf6c0ba","permalink":"https://subodhvsharma.github.io/course/sptopicsprivacy/","publishdate":"2020-08-01T00:00:00Z","relpermalink":"/course/sptopicsprivacy/","section":"course","summary":"Sem I (2020-21)","tags":null,"title":"COL865 Digitisation and Privacy","type":"book"},{"authors":null,"categories":null,"content":"General Information Class Timings: Mo/Wed from 11:00 hrs to 12:00 hrs Venue: Online (MS Teams) Instructor: Subodh Sharma (svs at cse.iitd.ac.in)\nCourse Description Course Description:We often find that our programs don’t run according to their specifications and even when they do the programs are large and clunky to extend or modify. This is a direct result of programmers running away from designing abstractions and not sufficiently focussing on simplicity and clarity. Could we instead work with a simple language that captures the essential aspects of program design before we decide to develop such programs? Would it not be great to not only state the software abstractions of systems succinctly, but also analyse them fully automatically akin to the continuous integration model of software development? In this course, we shall study one such specification language called Alloy and learn to model system abstractions succinctly and incrementally. We shall also learn to apply Alloy analysis tool to models which will facilitate in finding deeps flaws early in the design process without having to explicitly write a ton of unit tests.\nReference Book Software Abstractions by Daniel Jackson\nReference Links Alloy Online Tutorial Alloy Tutorial Slides Guest Talks Algorithmic Analysis of a Model Checking Partial Order Reduction Scheme Using Alloy by Prof. Stephen Siegel, Univesity of Delaware.\nExploring Memory Models using the Alloy Analyzer by Prof. John Wickerson, Imperial College London.\n","date":1596240000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1596240000,"objectID":"a5a0d0f94d11d645e21107cedf02b7c7","permalink":"https://subodhvsharma.github.io/course/spmoduleinsoftwaresystems-software-abstractions/","publishdate":"2020-08-01T00:00:00Z","relpermalink":"/course/spmoduleinsoftwaresystems-software-abstractions/","section":"course","summary":"Sem I (2020-21)","tags":null,"title":"COV 882 Special Module in Software Systems -- Software Abstractions","type":"book"},{"authors":null,"categories":null,"content":"General Information Co-Instructor: Subodh Sharma (email: svs at cse.iitd.ac.in) Semester: I, 2022-2023 Timings: Mon/Thur 16:30-18:00 Class Venue: LH 121 (Group 11-20) Lab Venue: LH 502-505 Notice All mails to the course instructor MUST have COL100 as the subject. Most of the reading material in this course will be available in PDF formats. To view PDF files you may download Adobe Acrobat Reader. Honour Code All students are expected to follow the highest ethical standards. Collaborations and discussions are encouraged. However, all students are required to write up all solutions entirely on their own. Any collaboration, or help taken, must be declared. Students are encouraged to refer to books, papers and internet resources. They may even consult other individuals. However, the source must be clearly cited if any part of the solution (or even an idea) is taken from such a source. Failure to declare any help taken will be interpreted as academic misconduct. Any breach of academic integrity will result in strict disciplinary action with a referral to the Institute Disciplinary committee. Course Overview Click here to see what the Courses of Study booklet has to say.\nCOL100: Introduction to Computer Science is intended for First Year B. Tech. students. The course COL100 addresses on the following issues:\nProblem formulation in a precise and concise fashion and independent of language considerations. The design of an algorithm from the problem specification – its correctness and analysis of its efficiency. The intermediate steps in the design of a program from an algorithm through a process of step-wise refinement. Language dependent considerations may be used in this process, but not elsewhere. The emphasis throughout the course is in the analysis required while designing correct and efficient algorithms. The course is intended to teach a student a systematic process of design - beginning with problem formulation from an informal specification, through convincing arguments to algorithms, the analysis of their correctness and efficiency, and finally arriving at programs through a process of step-wise refinement. A programming language bias is avoided and programs are developed in both imperative and functional styles.\nThe first part of the course introduces the basics of the functional and imperative models of computation, recursive and iterative processes, and the basics of programming using higher-order functions. The programming language used for functional and imperative programming is Python.\nThe second part of the course introduces data-directed programming. It emphasizes on programming with records, lists, trees, arrays and developing abstract data types.\nThe third part of the course addresses the issues in design and analysis of simple algorithms. Examples are taken from Divide and conquer, Backtracking, Numerical algorithms, Randomized algorithms and Geometric algorithms.\nReferences The primary references is going to be the\nLecture Notes on Introduction to Computing .\nOther References\nStructure and Interpretation of Computer Programs by Harold Abelson and Gerald Sussman with Julie Sussman, MIT Press, 1985.\nHow to solve it by Computer by R. J. Dromey, Prentice-Hall India EEE Series.\nPython resources:\nhttp://www.greenteapress.com/thinkpython/thinkpython.pdf http://docs.python.org/tutorial/index.html http://mcsp.wartburg.edu/zelle/python/ https://jobtensor.com/Python-Introduction Frequently Asked Questions COL100 Frequently asked questions (available locally within IITD).\nAdministrative Information and Grading Policy Grading Policy: Midterm - 25% Major (will include the entire syllabus) - 40% Labs - 15% (You can miss 2 out of n labs) Quiz - 5% Lab Test - 15% (Two lab test of 7 and 8 marks, respectively) Note that one will have to score a minimum of 10 in the Major, MidTerm evaluations and Labs (Lab + Lab Test) to pass the course. Grading will be on the basis of absolute marks.\nThe riot act: As per the Institute regulations, an A grade will be awarded only over 80% and no student with less than 30% will be given a passing grade.\nAn I grade will be awarded only in the case of an illness during the major exam. A make-up exam will be scheduled at the earliest, and the I grade will be converted as soon as possible. However, please do your best to ensure that you donot break a leg or otherwise fall ill during examinations. Repeat examinations are harder by tradition.\nOther Policies: Attendance: The Institute requires a mandatory 75% attendance for all students, which includes time lost due to illness. However this course will require 100% attendance. Please inform the instructor if for any reason you cannot attend a class. Be warned that it will be difficult to make up if you miss classes.\nIllness: In sickness or ill-health, a Medical Certificate from the Institute Sick Bay, or a doctor from an Institute-recognised hospital is necessary, especially if you request for a make-up test. Only in the case of serious …","date":1673132400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1673132400,"objectID":"ae5b9049c2161914cb74c43214148e80","permalink":"https://subodhvsharma.github.io/course/col100/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/course/col100/","section":"course","summary":"Sem I (2022-23)","tags":null,"title":"COL100 Introduction to Computer Science","type":"book"},{"authors":null,"categories":null,"content":"General Information Class Timings: Mon/Wed from 18:00 hrs to 19:30 hrs Venue: Bharti 425 Instructor: Subodh Sharma (svs at cse.iitd.ac.in)\nCourse Info \u0026amp; Objectives Program Synthesis has emerged as an effective approach to automatically create programs that meet user intent specified in the form of some specification. The technique is used successfully in diverse domains such as computer-aided education, software engineering, software verification etc. In this course we will discuss modern synthesis approaches by discussing foundational as well as recent research advances in this area. Topics covered in this course will include enumerative syntax-guided synthesis, counterexample-guided synthesis, stochastic synthesis and machine-learning based synthesis.\nAcademic Integrity: Plagiarism is viewed very seriously. Any case of copying (or allowing to copy) of written text or code would immediately be awarded 0 in the assignment/exam and a grade drop. Depending on the nature of plagiarism, the student could also be refered to the disciplanary committee with a fail grade. All written/programming tasks are to performed on your own, other than when group-work is explicitly specified.\nLecture Material Sr. No. Topic Supplementary Reading 1\tCourse modalities; Introduction 2, 3 Denali: A Goal-directed Superoptimizer Stochastic Superoptimization (ASPLOS\u0026#39;13) Equality saturation: a new approach to optimization (POPL\u0026#39;09) Automatic generation of peephole superoptimizers (ASPLOS\u0026#39;06) Synthesis of loop-free programs (PLDI\u0026#39;11) Scaling up Superoptimization (ASPLOS\u0026#39;16) 4-6 Program Synthesis by Sketching Sketching Stencils (PLDI\u0026#39;07) Sketching Concurrent Data strucutures (PLDI\u0026#39;08) Optimizing Synthesis with Metasketches (POPL\u0026#39;16) 7-8 Syntax Guided Synthesis \u0026amp; Search-based Program Synthesis Synthesis Through Unification (CAV\u0026#39;15) 9-11 Spreadsheet Data Manipulation Using Examples Synthesizing Data Structure Transformations from Input-Output Examples (PLDI\u0026#39;15) Test-driven synthesis (PLDI\u0026#39;14) Learning Syntactic Program Transformations from Examples (ICSE\u0026#39;17) Scaling Enumerative Program Synthesis via Divide and Conquer (TACAS\u0026#39;17) Synthesizing highly expressive SQL queries from input-output examples (PLDI\u0026#39;17) 12-13 From Program Verification to Program Synthesis ICE: A robust Framework for Learning Invariants (CAV\u0026#39;14) Type-and-example-directed Program Synthesis (PLDI\u0026#39;15) Program Synthesis using Abstraction Refinement (POPL\u0026#39;18) Program Synthesis using Conflict-Driven Learning (PLDI\u0026#39;18) 14-16 Stochastic Program Optimization Data-driven Equivalence Checking (OOPSLA\u0026#39;13) Finding deep compiler bugs via guided stochastic program mutation (OOPSlA\u0026#39;15) Guided, stochastic model-based GUI testing of Android apps (FSE\u0026#39;17) Sampling for Bayesian Program Learning (NIPS\u0026#39;16) Code Completion with Statistical Language Models (PLDI\u0026#39;14) 17 Course Project Discussions 18-22 Neural Program Learning under Noisy I/O (ICML\u0026#39;17) Nueral-guided Deductive Search for Realtime Program Synthesis from Examples (ICLR\u0026#39;18) Learning Programs from Noisy Data (POPL\u0026#39;16) Neuro-Symbolic Program Synthesis (ArXiv\u0026#39;16) Learn \u0026amp; Fuzz: Machine learning for input fuzzing (ASE\u0026#39;17) 23-28 Course Project Presentations ","date":1564617600,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1564617600,"objectID":"0ef9dc04370050d98615f5f849ba1310","permalink":"https://subodhvsharma.github.io/course/sptopicsinpl-program-synthesis/","publishdate":"2019-08-01T00:00:00Z","relpermalink":"/course/sptopicsinpl-program-synthesis/","section":"course","summary":"Sem I (2019-20)","tags":null,"title":"COL 871 Special Topics in Programming Languages -- Program Synthesis","type":"book"},{"authors":null,"categories":null,"content":"Object Oriented Programming Develop an abstract data-type called interval. An interval is defined by two real numbers signifying the lower and upper bounds. Develop the following functions for carrying out operations on intervals:\nmake_nterval, for creating an interval intadd, for adding two intervals. Here the minimum value of the sum should be the sum of the two lower bounds and the maximum value of the sum should be the sum of the two upper bounds. intsubtract, for subtracting two intervals. intmult, for multiplying two intervals. intdiv, for dividing two intervals. Stack is a last-in-first-out kind of a data structure which is used in the real world where order of evaluation of data items is necessary - for instance, evaluating expressions with operands and operators (associated with precedence), tasks involving backtracking (eg: depth first search), etc. Implement an integer stack which uses python lists to store the contents. In particular, implement the following methods of stack: pop, push, peek, isEmpty, isFull.\nChallenge (optional) Implement the Tetris game using OOP in python. In Tetris, any object has three states: rotation (by 90 degrees), shape and color. In terms of the behavioural attributes a Tetris object can either: fall, move sideways, or rotate.\n","date":1673132400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1673132400,"objectID":"d5f56aa67257affb74cc7d0e1122b8f0","permalink":"https://subodhvsharma.github.io/course/col100/assign7/","publishdate":"2023-01-08T00:00:00+01:00","relpermalink":"/course/col100/assign7/","section":"course","summary":"Object Oriented Programming Develop an abstract data-type called interval. An interval is defined by two real numbers signifying the lower and upper bounds. Develop the following functions for carrying out operations on intervals:","tags":null,"title":"Assignment 7","type":"book"},{"authors":null,"categories":null,"content":"More on Imperative Programming with Loops Given a randomly ordered array of $n$ elements partition the elements into two subsets such that elements less than $x$ are in one subset and elements greater than $x$ are in separate subset. For instance, $|28|26|25|11|16|12|24|29|6|10|$ and $x = 17$ lead to the array $|10|6|12|11|16|25|24|29|26|28|$. We provide here a high level algorithmic description of the problem.\nEstablish the array $a[0,…,n]$ and the partitioning value $x$. Move the partitions towards each other until the wrongly placed elements are encountered. Allow for special cases such as $x$ being outside the range of array values. While the two partitions have not crossed over exchange the wrongly partitioned pair and extend both partitions inward by one element extend left partition while elements less tha or equal to $x$ extend the right partition while elements are greater than $x$ Return the partitioning index $p$ in the partitioned array. Give an algorithm to find the $k^{th}$ smallest element in a given randomly ordered array of $n$ elements. Note that one could solve the problem by first sorting the array and subsequently returning the $k^{th}$ element in the array as the solution. However, such sorting is unnecessary and costly. Use the partitioning strategy from Question(2) to develop a solution for this problem. We provide some hints to solving this problem:\nSet $l$ and $u$ to be the bounds of the array While $l \u0026lt; u$ do: Choose some random $x$ about which to partition the array Partition the array in to two partitions $A$ and $B$ marked by indices $i$ and $j$ Choose a partition to perform further search by using a test: if $j\u0026lt;k$ then $l:=i$, if $i\u0026gt;k$ then $u:=j$ Given a array of $n$ distinct integers, find the length of the longest monotone increasing subsequence. Consider an array: $|1|2|9|4|7|3|11|8|14|6|$. In this example the longest increasing subsequence is of $1,2,4,7,11,14$ and is of length 6. Note that in for a monotone increasing subsequence, the numbers are not required to be adjacent in the original array. A general algorithmic description is as follows:\nEstablish $a[0,…,n]$ of $n$ elements Set the initial condition of the longest subsequence terminating in the first position of the array For the remaining $n-1$ positions in the array do: if current element is less than the maximum in the longest previous set then locate the position and value of maximum among the predecessors and update the position and length of maximum, if required. Else, update the length, position of maximum and the maximum length so far. Return the length of longest monotone increasing sequence. ","date":1672009200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1672009200,"objectID":"0bf56da5974b4800c595d14096c0fd31","permalink":"https://subodhvsharma.github.io/course/col100/assign6/","publishdate":"2022-12-26T00:00:00+01:00","relpermalink":"/course/col100/assign6/","section":"course","summary":"More on Imperative Programming with Loops Given a randomly ordered array of $n$ elements partition the elements into two subsets such that elements less than $x$ are in one subset and elements greater than $x$ are in separate subset.","tags":null,"title":"Assignment 6","type":"book"},{"authors":null,"categories":null,"content":"Sorting Implement Quicksort recursively in python and compare run times of Quicksort and Insertion sort on large data-sets by plotting your results (Time vs listSize). Searching Given a filesystem as a directed acylic graph (i.e., a graph with no cycles) as input in the form of a dictionary (as shown in the class), traverse and print the directory structure in Depth-first search and Breadth-first search. Use the following filesystem as an input:\nfileSystem = { \u0026#34;home\u0026#34;: [\u0026#34;tmp\u0026#34;, \u0026#34;teaching\u0026#34;, \u0026#34;documents\u0026#34;] \u0026#34;tmp\u0026#34; : [] \u0026#34;teaching\u0026#34;: [\u0026#34;col100\u0026#34;, \u0026#34;cov885\u0026#34;] \u0026#34;col100\u0026#34; [\u0026#34;practice-sheet\u0026#34;] \u0026#34;practice-sheet\u0026#34;: [] \u0026#34;cov885\u0026#34;:[] \u0026#34;documents\u0026#34;:[\u0026#34;temp\u0026#34;] \u0026#34;temp\u0026#34;: [] } Sort + Search Given an list/array a[0, ..., n-1] of n nonzero integers, develop an algorithm to remove all duplicates by replacing a duplicate with 0 value; An instance of an array before duplicate removal is: |2|2|4|8|8|23|37|37|42|. After the duplicate removal we have the following array: |2|4|8|23|37|42|0|0|0|. Provide correctness argument and timing analysis of your solution. ","date":1670713200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1670713200,"objectID":"0052ddc5842801d023e9bceaa3811710","permalink":"https://subodhvsharma.github.io/course/col100/assign5/","publishdate":"2022-12-11T00:00:00+01:00","relpermalink":"/course/col100/assign5/","section":"course","summary":"Sorting Implement Quicksort recursively in python and compare run times of Quicksort and Insertion sort on large data-sets by plotting your results (Time vs listSize). Searching Given a filesystem as a directed acylic graph (i.","tags":null,"title":"Assignment 5 -- Sorting and Searching","type":"book"},{"authors":null,"categories":null,"content":"Lists Develop a Python program for adding and multiplying two large integers whose digits are stored in lists. For example: integer number 123is stored as 3::2::1. Establish the correctness of your solutions.\nAssume you have been given a list of file and directory names along with the respective access control modes (as drwxrwxrwx). The storage structure is a list of pairs. For example [(\u0026#39;assign1\u0026#39;, -r--r--r--), (\u0026#39;lectureNotes\u0026#39;, dr-xr--r--)] indicates two objects: the first object is a file with name assign1 and access permissions 444; the second object is a directory named lectureNotes with access permissions 544. Develop a python program to filter from the list only those objects that are files and change their access permissions to 755. Use Python’s in-built map and filter functionality for this problem.\nImplement the reduce functionality of Python using recursion.\n","date":1669503600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1669503600,"objectID":"48b0e722f565fba97524c5f7018cf3bb","permalink":"https://subodhvsharma.github.io/course/col100/assign4/","publishdate":"2022-11-27T00:00:00+01:00","relpermalink":"/course/col100/assign4/","section":"course","summary":"Lists Develop a Python program for adding and multiplying two large integers whose digits are stored in lists. For example: integer number 123is stored as 3::2::1. Establish the correctness of your solutions.","tags":null,"title":"Assignment 4 -- Lists, Searching, Sorting","type":"book"},{"authors":null,"categories":null,"content":"More on Recursion Two frogs are sitting at bottom of a flight of $10$ steps and debating in how many ways can they jump up the stairs. They can jump one, two or three steps at a time. For example they can cover the 10 steps by jumping $(3, 3, 3 , 1)$ or $(2 ,3, 3, 2)$ or other suitable combinations. Their mathematics is not very strong (being frogs) and they approach you for help. Develop an efficient Python function that provides a general solution (not only for $10$ but for general $n$ steps). Note that $(3,3,3,1)$ is distinct from $(1,3,3,3)$ and likewise and that we only want to count the number of solutions and not report the solutions. Perform the timing analysis of your solution.\nWrite a Python program to count the number of ways for a rook to move from the southwest corner of a $p \\times q$ chessboard to the northeast corner by moving one square at a time eastward or northward only. Note that rook is a chess piece that can move horizontally and vertically on a chess board. Give a recursive formulation and do not use a formula.\nDevelop a higher order function and show its use in computing fastpower (from Assign1), perfect numbers, $e^{x}$ up to some $n$-th term, and the higher order double summation function to compute $\\Sigma_{i = a}^{b}\\Sigma_{j=c}^{d}$. Provide proof of correctness and timing analysis.\nDefine a higher order composition function compose(f, g,x) in Python and use it to implement a function repeat(f,n) to compute $f^n(x)$.\n","date":1668380400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1668380400,"objectID":"2ba839f92115193be3623ce3381d4394","permalink":"https://subodhvsharma.github.io/course/col100/assign3/","publishdate":"2022-11-14T00:00:00+01:00","relpermalink":"/course/col100/assign3/","section":"course","summary":"More on Recursion Two frogs are sitting at bottom of a flight of $10$ steps and debating in how many ways can they jump up the stairs. They can jump one, two or three steps at a time.","tags":null,"title":"Assignment 3 -- More on Recursion","type":"book"},{"authors":null,"categories":null,"content":"Basic Python Learn how to perform simple operations such as exponents (Eg:$2^3$), remainder, integer division. Also understand the order of such operations that Python enforces. Run (5-1)*(7+1)/(3-1) in Python interpreter and indicate the order of evaluation of expressions (Note: an expression consists of values and operators such that they can always evaluate to a single value).\nLearn how values of common datatypes such as int, floats, string, and bool are specified in Python by using the interpreter. Interpret the results of the following expressions: (i) \u0026#39;Python\u0026#39; + \u0026#39;Rocks\u0026#39; and (ii) \u0026#39;Python\u0026#39; + 42. Experiment with other combinations of operators and types.\nVariables are named locations in computer’s memory that can store a single value. If you want to use the result of an evaluated expression later in your program, you can save it inside a variable. Learn the use of print() and input() functions. Write a python program that takes as input a float radius of a circle and prints its perimeter and area. Use format() function to print the value of $\\pi$ rounded\nto 14 digits. (Conditions) Learn python’s way of specifying conditional\nexpressions (if-else, if-elif-else). Given any integer $y$ denoting a year in the Christian calendar, we would like to determine whether it is a leap year. A leap year is one which is divisible by $4$. Also not all years divisible by $4$ are leap years. Century years are leap only if they are divisible by $400$. So we define a boolean function leap which yields a value “true” if the year $y$ is a leap year and false otherwise. Write a python program for the problem above. Show in the interpret the output for the following expressions when evaluated:\n(5 \u0026gt; 4) and (3 == 5) not (5 \u0026gt; 4) (5 \u0026gt; 4) or (3 == 5) not ((5 \u0026gt; 4) or (3 == 5)) (True and True) and (True == False) (not False) or (not True) Basic Algorithm Design and Python Programming Computing factorial of a given integer using recursive procedure which is technically complete. For some inputs (from the domain of Integers) the computation may not terminate. Identify such inputs and provide reason for this non-termination.\nComputing $x^n$ through a recursive procedure. Provide correctness and time complexity arguments as comments in the program. Further design and implement a faster recursive version of the power function.\nChallenge Question The integer square root of $n$ is the integer $k$ such that $k^2 \\leq n \u0026lt; (k+1)^2$. The integer square root can be computed using the following inductive process: Compute the integer square root $i$ of $m = n ,\\mbox{div}, 4$ recursively. We then have that $i^2 \\leq m \u0026lt; (i+1)^2$. Since $m$ and $i$ are integers we have that $(m+1) \u0026lt;= (i+1)^2$. We thus have $(2i)^2 \\leq 4m \\leq n \u0026lt; 4m + 4 \\leq (2i + 2)^2$. Hence we have that the integer square root of $n$ is either $2i$ or $2i+1$. Write a recursive python program corresponding to the above algorithm. Derive the number of steps required. ","date":1667689200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1667689200,"objectID":"1eed57284d41b902cecc95bdfdd2846a","permalink":"https://subodhvsharma.github.io/course/col100/assign2/","publishdate":"2022-11-06T00:00:00+01:00","relpermalink":"/course/col100/assign2/","section":"course","summary":"Basic Python Learn how to perform simple operations such as exponents (Eg:$2^3$), remainder, integer division. Also understand the order of such operations that Python enforces. Run (5-1)*(7+1)/(3-1) in Python interpreter and indicate the order of evaluation of expressions (Note: an expression consists of values and operators such that they can always evaluate to a single value).","tags":null,"title":"Assignment 2 -- Introduction to Python","type":"book"},{"authors":null,"categories":null,"content":"1. Learn the following basics of Unix: What is a Unix terminal and how to open one? Reference: Unix Introduction What are files and processes? What is a directory and how are files grouped together in a directory structure? Reference: Unix Tutorial 1 How to list files and directories? How to create files and directories? How to copy and move files? Reference: Unix Tutorial 2 What are file access permissions and how to change them? Reference: Unix Tutorial 5 It is expected that by the end of this task, you are familiar with the usage of unix commands such as: ls, cp, rm, mv, touch, chmod, groups, passwd, cd, pwd, mkdir, cat, find 2. Open up a browser (firefox/Chrome) and access the COL100 homepage. 3. Open an email client (webmail IIT Delhi) and login to your account. Send an email to the instructor of COL100 and then logout. 4. Learn how to use and navigate a text editor: Type the following command on your terminal prompt: gedit \u0026amp; Open the gedit tutorial and experiment with at least the following sections (you can experiment with all the subsections on the gedit tutorial page, if you like): File basics: Open, close, and save files Replace text and Search for text Undo a recent action Turn on syntax highlighting by selecting gedit -\u0026gt; Preferences -\u0026gt; Plugins -\u0026gt; Python Console ","date":1577574000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577574000,"objectID":"56e16e6ba40d1d13bc81c7b6b41da47c","permalink":"https://subodhvsharma.github.io/course/col100/assign1/","publishdate":"2019-12-29T00:00:00+01:00","relpermalink":"/course/col100/assign1/","section":"course","summary":"1. Learn the following basics of Unix: What is a Unix terminal and how to open one? Reference: Unix Introduction What are files and processes? What is a directory and how are files grouped together in a directory structure?","tags":null,"title":"Assignment 1","type":"book"},{"authors":null,"categories":null,"content":"1. Spanning Tree Implement a predicate that takes a binary relation as input (on univ set) and tests whether or not the relation is a tree. Implement a predicate that takes two binary relations as input and constrains one to be a spanning tree of the other. Use this predicate to give an example of a graph with two distinct spanning trees. Note that the versions of the predicate may be different for directed or undirected graphs. Specify both the versions. Consider a weighted undirected graph. Implement a predicate to check whether a given relation forms an MST. 2. Report Create a report in latex clear.y explaining how you iteratively refined your model and how did Alloy help you to indentify counter-examples in your modeling process. ","date":1577574000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577574000,"objectID":"11244112e45f8abee641199406c6b2a1","permalink":"https://subodhvsharma.github.io/course/spmoduleinsoftwaresystems-software-abstractions/assign1/","publishdate":"2019-12-29T00:00:00+01:00","relpermalink":"/course/spmoduleinsoftwaresystems-software-abstractions/assign1/","section":"course","summary":"1. Spanning Tree Implement a predicate that takes a binary relation as input (on univ set) and tests whether or not the relation is a tree. Implement a predicate that takes two binary relations as input and constrains one to be a spanning tree of the other.","tags":null,"title":"Assignment 1","type":"book"},{"authors":null,"categories":null,"content":"Modeling FSMs (Finite State Machines) [EASY] A FSM has non-empty set of initial states and a transition relation which connects each state to its successors. Construct an Alloy model of FSMs by adding constraints and having the analyzer solve them, generate a variety of examples of machines:\nA deterministic machine, in which each state has at most one successor; A non-deterministic machine, in which some states have more than one successor; A machine with unreachable states; A machine without unreachable states; A connected machine in which every state is reachable from every other state; A machine with a deadlock: a reachable state that has no successors; A machine with a livelock: the possibility of an infinite execution in which a state that is always reachable is never reached. Modeling Concurrent Program Executions [CHALLENGING] Semantics of any program is generally defined by a set of executions. An execution of a program is composed of events. Events are either read (or write) from (or to) a location or fences. Events can also be classified into those that access atomic locations and those that access non-atomic ($nal$) locations. Events from the same thread are ordered w.r.t. each other via a total order called sequenced-before ($sb$). Other relations that may exist between events are:\ndependency relations such as address ($ad$), control ($cd$) or data ($dd$) dependency whether events are from the same thread ($sthd$) or accessing the same location ($ sloc$) reads-from (rf) relation – a relation containing edges to read actions from the write actions whose values they take, coherence-order ($co$) – a total order on distinct writes to the same atomic location) reads-from-external ( $rfe \\overset{\\mathrm{def}}{=} rf \\setminus sthd $) The constaints on the structure of basic well-formed executions are:\nRead, write, fence and $nal$ are drawn from the events $E$ that appear in the execution Fence operations are distinct from read and write events $sb$ is a intra-thread and strict partial order the nature of address, control and data dependencies (i.e., their relation to read and write events) $rf$ is well-formed if the related writes and read are to the same location and is injective. Simialrly, $co$ is well-formed if the writes are to the same location forms a strict partial order. $rfe$ is derived from $rf$. The above is not an exhaustive list. Some other simpler constriants coming straight from the natural definition of the relations have been left out. One can refer to the paper Mathematizing C++ Concurrency for natural definition of the relations mentioned above.\nRelease ($rel$) and acquire ($acq$) are atomic write and read events, respectively. A fence can also have release or acquire semantics. A consistent execution of a program with release and acquire events has the following constraints:\nA happens-before ($hb$) relation – created from $sb$ and the syncrhonisation of release and acquire events in the execution. $hb$ edges between events accessing the same location, together with $rf, co$ and $fr$ must not form cycles. Note that $fr$ relates each read to all of the writes that are coherence-ordered later than the write that the read observed. Implement the basic execution modeling in Alloy and extend your model to the release-acquire fragment of C11. Show litmus execution behaviours of consistent executions, data race-free and with race executions.\nReport Create a report in latex and explain how you iteratively refined the model and how did Alloy help you to indentify counter-examples in your modeling process. ","date":1577574000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577574000,"objectID":"8f29a0be7be9fbefc129368458b306a3","permalink":"https://subodhvsharma.github.io/course/spmoduleinsoftwaresystems-software-abstractions/assign2/","publishdate":"2019-12-29T00:00:00+01:00","relpermalink":"/course/spmoduleinsoftwaresystems-software-abstractions/assign2/","section":"course","summary":"Modeling FSMs (Finite State Machines) [EASY] A FSM has non-empty set of initial states and a transition relation which connects each state to its successors. Construct an Alloy model of FSMs by adding constraints and having the analyzer solve them, generate a variety of examples of machines:","tags":null,"title":"Assignment 2","type":"book"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature. Slides can be added in a few ways:\nCreate slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes. Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://subodhvsharma.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Dhriti Khanna","Rahul Purandare","Subodh Sharma"],"categories":["Concurrency"],"content":"","date":1618157067,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618157067,"objectID":"4ca33bf9dd745eaab6fe5057eb59a9b2","permalink":"https://subodhvsharma.github.io/publication/icst21/","publishdate":"2021-04-11T21:34:27+05:30","relpermalink":"/publication/icst21/","section":"publication","summary":"In ICST 2021","tags":["Testing","Java","Symoblic Execution"],"title":"Synthesizing Multi-threaded Tests from Sequential Traces to Detect Communication Deadlocks","type":"publication"},{"authors":["Subodh Sharma","吳恩達"],"categories":["Demo","教程"],"content":"import libr print(\u0026#39;hello\u0026#39;) Overview The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It’s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more Get Started 👉 Create a new site 📚 Personalize your site 💬 Chat with the Wowchemy community or Hugo community 🐦 Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy 💡 Request a feature or report a bug for Wowchemy ⬆️ Updating Wowchemy? View the Update Tutorial and Release Notes Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n❤️ Click here to become a sponsor and help support Wowchemy’s future ❤️ As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features 🦄✨\nEcosystem Hugo Academic CLI: Automatically import publications from BibTeX Inspiration Check out the latest demo of what you’ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files. Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://subodhvsharma.github.io/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","开源"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post"},{"authors":["Subodh Sharma","Subhashis Banerjee"],"categories":["Security"],"content":"India is arguably the biggest deployer of digitization in public life with large public service applications (in-use or contemplated) like national identity, electronic voting, health registry, national population and voter registries, public credit registry, income and other tax registries, face recognition based access control to airports and other facilities, bluetooth based contact tracing and a national intelligence grid.\nIn this project, we are investigating the core privacy requirements in large public service applications (such as eVoting, Aadhaar, etc.). In particular the two focussed activities under the project are:\nDesign of an end-to-end individually verifiable DRE voting protocol\nDesigning a privacy-centric architecture for digital applications where the focus is to address privacy violation ex-ante rather than ex-post\n","date":1605071279,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605071279,"objectID":"6be4310f49efd06af39cec2660c661e8","permalink":"https://subodhvsharma.github.io/project/privacy-and-digitisation/","publishdate":"2020-11-11T10:37:59+05:30","relpermalink":"/project/privacy-and-digitisation/","section":"project","summary":"India is arguably the biggest deployer of digitization in public life with large public service applications (in-use or contemplated) like national identity, electronic voting, health registry, national population and voter registries, public credit registry, income and other tax registries, face recognition based access control to airports and other facilities, bluetooth based contact tracing and a national intelligence grid.","tags":["Security"],"title":"Privacy and Digitisation","type":"project"},{"authors":["Sanjiva Prasad","Y. Madhukar","Subodh Sharma"],"categories":[],"content":"","date":1605024537,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605024537,"objectID":"5521c9ef1b48061cc1fa8cb598efb94f","permalink":"https://subodhvsharma.github.io/publication/memocode20/","publishdate":"2020-11-10T21:38:57+05:30","relpermalink":"/publication/memocode20/","section":"publication","summary":"In MEMOCODE 2020 (Best Paper Award)","tags":["Security","IoT"],"title":"Security Types for Synchronous Data Flow Systems.","type":"publication"},{"authors":["Dhriti Khanna","Rahul Purandare","Subodh Sharma"],"categories":["Concurrency"],"content":"","date":1605024267,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605024267,"objectID":"ed6e38e68185c68e1c63c0eb107c8aec","permalink":"https://subodhvsharma.github.io/publication/icsme20/","publishdate":"2020-11-10T21:34:27+05:30","relpermalink":"/publication/icsme20/","section":"publication","summary":"In ICSME 2020","tags":["Testing","Java","Symoblic Execution"],"title":"Verifying and Testing Concurrent Programs using Constraint Solver based Approaches","type":"publication"},{"authors":["Subhashis Banerjee","Subodh Sharma"],"categories":["Security"],"content":"","date":1605023693,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605023693,"objectID":"702a7abb7e83581ffd5853f68f5b1b78","permalink":"https://subodhvsharma.github.io/publication/cacm19/","publishdate":"2020-11-10T21:24:53+05:30","relpermalink":"/publication/cacm19/","section":"publication","summary":"In ACM CACM 2019","tags":["Aadhaar"],"title":"Privacy concerns with Aadhaar","type":"publication"},{"authors":["Subodh Sharma"],"categories":["Blockchain","Security"],"content":"IoT space is expanding at a tremendous pace and security in IoT systems has been identified as one of the critical areas which require attention. In this project we are developing a secure and trusted application layer framework for IoT systems. We, at IITD, are investigating two important subproblems in the context of security of IoTs:\nsmart contract verification and automated synthesis of smart contracts. Creation of The project is funded by the DST-JST grant and Denso Corporation. RA positions are available under this project ","date":1605022751,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605022751,"objectID":"be27a3381e50118113d9f1be22cf929d","permalink":"https://subodhvsharma.github.io/project/iot-security/","publishdate":"2020-11-10T21:09:11+05:30","relpermalink":"/project/iot-security/","section":"project","summary":"IoT space is expanding at a tremendous pace and security in IoT systems has been identified as one of the critical areas which require attention. In this project we are developing a secure and trusted application layer framework for IoT systems.","tags":["Security","IoT","Blockchain"],"title":"IoT Security","type":"project"},{"authors":["Subodh Sharma"],"categories":["Concurrency"],"content":"Message passing is pervasive – from inter processs communication in multicores to high performance computing, message passing plays a central role. In this project, we envison to create a\nframework to analyse message passing systems. In particular:\nCreate efficient dynamic symbolic encodings for VCs in message passing programs\nExploit the symmetry and parametricity to scale up the verification problem.\nThe project is funded by the DST-ECRA grant ","date":1605013342,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605013342,"objectID":"4c47e1cfdbd2771ab107369cf71f413d","permalink":"https://subodhvsharma.github.io/project/verification-of-message-passing-systems/","publishdate":"2020-11-10T18:32:22+05:30","relpermalink":"/project/verification-of-message-passing-systems/","section":"project","summary":"Message passing is pervasive – from inter processs communication in multicores to high performance computing, message passing plays a central role. In this project, we envison to create a\nframework to analyse message passing systems.","tags":["MPI","Dynamic Symbolic Analysis"],"title":"Verification of Message Passing Systems","type":"project"},{"authors":["Sanjana Singh","Divyanjali","Subodh Sharma"],"categories":["Concurrency"],"content":"Verification of parallel systems is a complex exercise. The large state spaces created due to thread interleavings complicates the verification of such parallel systems. The problem becomes even harder in case of parallel programs executed under relaxed memory models. Under this project we are investigating two directions:\nA runtime analysis that uses dynamic partial order reduction (DPOR) to verify other multi-copy atomic (oMCA) behaviors of C++11 programs A static analysis of Release-Acquire memory fragment of C11 concurrency by exploiting thread-modular abstract interpretation technique. These projects is funded by the DST Early Career Research grant. ","date":1605000653,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605000653,"objectID":"2d721a658f0a45f94f51d574251db48a","permalink":"https://subodhvsharma.github.io/project/verification-of-c11-concurrency/","publishdate":"2020-11-10T15:00:53+05:30","relpermalink":"/project/verification-of-c11-concurrency/","section":"project","summary":"Verification of parallel systems is a complex exercise. The large state spaces created due to thread interleavings complicates the verification of such parallel systems. The problem becomes even harder in case of parallel programs executed under relaxed memory models.","tags":["DPOR","Abstract Interpretation","Concurrency"],"title":"Verification of C11 Concurrency","type":"project"},{"authors":null,"categories":null,"content":"Wowchemy is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you’ll find some examples of the types of technical content that can be rendered with Wowchemy.\nExamples Code Wowchemy supports a Markdown extension for highlighting code syntax. You can customize the styles under the syntax_highlighter option in your config/_default/params.yaml file.\n```python import pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() ``` renders as\nimport pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() Mindmaps Wowchemy supports a Markdown extension for mindmaps.\nSimply insert a Markdown markmap code block and optionally set the height of the mindmap as shown in the example below.\nA simple mindmap defined as a Markdown list:\n```markmap {height=\u0026#34;200px\u0026#34;} - Hugo Modules - wowchemy - wowchemy-plugins-netlify - wowchemy-plugins-netlify-cms - wowchemy-plugins-reveal ``` renders as\n- Hugo Modules - wowchemy - wowchemy-plugins-netlify - wowchemy-plugins-netlify-cms - wowchemy-plugins-reveal A more advanced mindmap with formatting, code blocks, and math:\n```markmap - Mindmaps - Links - [Wowchemy Docs](https://wowchemy.com/docs/) - [Discord Community](https://discord.gg/z8wNYzb) - [GitHub](https://github.com/wowchemy/wowchemy-hugo-themes) - Features - Markdown formatting - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;hello\u0026#39;); console.log(\u0026#39;code block\u0026#39;); ``` - Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ ``` renders as\n- Mindmaps - Links - [Wowchemy Docs](https://wowchemy.com/docs/) - [Discord Community](https://discord.gg/z8wNYzb) - [GitHub](https://github.com/wowchemy/wowchemy-hugo-themes) - Features - Markdown formatting - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;hello\u0026#39;); console.log(\u0026#39;code block\u0026#39;); ``` - Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ Charts Wowchemy supports the popular Plotly format for interactive charts.\nSave your Plotly JSON in your page folder, for example line-chart.json, and then add the {{\u0026lt; chart data=\u0026#34;line-chart\u0026#34; \u0026gt;}} shortcode where you would like the chart to appear.\nDemo:\nYou might also find the Plotly JSON Editor useful.\nMath Wowchemy supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.yaml file.\nTo render inline or block math, wrap your LaTeX math with {{\u0026lt; math \u0026gt;}}$...${{\u0026lt; /math \u0026gt;}} or {{\u0026lt; math \u0026gt;}}$$...$${{\u0026lt; /math \u0026gt;}}, respectively. (We wrap the LaTeX math in the Wowchemy math shortcode to prevent Hugo rendering our math as Markdown. The math shortcode is new in v5.5-dev.)\nExample math block:\n{{\u0026lt; math \u0026gt;}} $$ \\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2} $$ {{\u0026lt; /math \u0026gt;}} renders as\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}$$ Example inline math {{\u0026lt; math \u0026gt;}}$\\nabla F(\\mathbf{x}_{n})${{\u0026lt; /math \u0026gt;}} renders as $\\nabla F(\\mathbf{x}_{n})$.\nExample multi-line math using the math linebreak (\\\\):\n{{\u0026lt; math \u0026gt;}} $$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$ {{\u0026lt; /math \u0026gt;}} renders as\n$$ f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases} $$ Diagrams Wowchemy supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ``` renders as\ngraph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] An example sequence diagram:\n```mermaid sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ``` renders as\nsequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! An example Gantt diagram:\n```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ``` renders …","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562889600,"objectID":"07e02bccc368a192a0c76c44918396c3","permalink":"https://subodhvsharma.github.io/post/writing-technical-content/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/post/writing-technical-content/","section":"post","summary":"Wowchemy is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.","tags":null,"title":"Writing technical content in Markdown","type":"post"},{"authors":["Subodh Sharma"],"categories":[],"content":"from IPython.core.display import Image Image(\u0026#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png\u0026#39;) print(\u0026#34;Welcome to Academic!\u0026#34;) Welcome to Academic! Install Python and JupyterLab Install Anaconda which includes Python 3 and JupyterLab.\nAlternatively, install JupyterLab with pip3 install jupyterlab.\nCreate or upload a Jupyter notebook Run the following commands in your Terminal, substituting \u0026lt;MY-WEBSITE-FOLDER\u0026gt; and \u0026lt;SHORT-POST-TITLE\u0026gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:\nmkdir -p \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ cd \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ jupyter lab index.ipynb The jupyter command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.\nEdit your post metadata The first cell of your Jupter notebook will contain your post metadata (front matter).\nIn Jupter, choose Markdown as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:\n--- title: My post\u0026#39;s title date: 2019-09-01 # Put any other Academic metadata here... --- Edit the metadata of your post, using the documentation as a guide to the available options.\nTo set a featured image, place an image named featured into your post’s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\nConvert notebook to Markdown jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=. Example This post was created with Jupyter. The orginal files can be found at https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567641600,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"https://subodhvsharma.github.io/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://subodhvsharma.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Dhriti Khanna","Subodh Sharma","Cesar Rodriguez","Rahul Purandare"],"categories":null,"content":"","date":1531612800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531612800,"objectID":"b1b0e4f355ca13df17ffd2f5d2e5d92a","permalink":"https://subodhvsharma.github.io/publication/fm18/","publishdate":"2018-07-15T00:00:00Z","relpermalink":"/publication/fm18/","section":"publication","summary":"In FM 2018","tags":["model checking","mpi","runtime verification","symbolic analysis"],"title":"Dynamic Symbolic Verification of MPI Programs","type":"publication"},{"authors":["Sukrit Kalra","Seep Goel","Mohan Dhawan","Subodh Sharma"],"categories":null,"content":"","date":1518652800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1518652800,"objectID":"02f6a2c05a0298a403ac4328f9c4da84","permalink":"https://subodhvsharma.github.io/publication/ndss18/","publishdate":"2018-02-15T00:00:00Z","relpermalink":"/publication/ndss18/","section":"publication","summary":"In NDSS 2018","tags":["blockchain","smart contracts","model checking"],"title":"Zeus: Analyzing Safety of Smart Contracts.","type":"publication"},{"authors":["Vojtech Forejt","Saurabh Joshi","Daniel Kroening","Ganesh Narayanaswamy","Subodh Sharma"],"categories":null,"content":" ","date":1488326400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1488326400,"objectID":"a0a98a4e1375674c25b6cd5870303f22","permalink":"https://subodhvsharma.github.io/publication/toplas17/","publishdate":"2017-03-01T00:00:00Z","relpermalink":"/publication/toplas17/","section":"publication","summary":" ","tags":["mpi","deadlocks","symbolic analysis"],"title":"Precise Predictive Analysis for Discovering Communication Deadlocks in MPI Programs","type":"publication"},{"authors":["Sukrit Kalra","Ayush Goel","Dhriti Khanna","Mohan Dhawan","Subodh Sharma","Rahul Purandare"],"categories":null,"content":" ","date":1478995200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1478995200,"objectID":"d7c81a47c50a7735571fae68b674e892","permalink":"https://subodhvsharma.github.io/publication/fse16/","publishdate":"2016-11-13T00:00:00Z","relpermalink":"/publication/fse16/","section":"publication","summary":" ","tags":["program analysis","testing","binary instrumentation"],"title":"POLLUX: Safely Upgrading Dependent Application Libraries","type":"publication"},{"authors":["Chinmay Narayan","Subodh Sharma","Shibashis Guha","S. Arun-Kumar"],"categories":[],"content":"","date":1468713600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1468713600,"objectID":"a49f7f5dacfd419f561a33faf21e22c7","permalink":"https://subodhvsharma.github.io/publication/tase16/","publishdate":"2019-11-07T16:34:50+05:30","relpermalink":"/publication/tase16/","section":"publication","summary":"","tags":["trace partitioning"],"title":"From Traces to Proofs: Proving Concurrent Programs Safe","type":"publication"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://subodhvsharma.github.io/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Example Project","type":"project"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://subodhvsharma.github.io/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":["Chinmay Narayan","Subodh Sharma","S. Arun-Kumar"],"categories":[],"content":"","date":1451606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1451606400,"objectID":"3cf1b4d2c73851fbc25566af021f72e6","permalink":"https://subodhvsharma.github.io/publication/arxiv16-concurrencyproofs/","publishdate":"2019-11-07T16:48:05+05:30","relpermalink":"/publication/arxiv16-concurrencyproofs/","section":"publication","summary":"","tags":["relaxed memory","trace partitioning","verification"],"title":"Efficient Verification of Concurrent Programs over TSO Memory Model","type":"publication"},{"authors":["Cesar Rodriguez","Marcelo Sousa","Subodh Sharma","Daniel Kroening"],"categories":null,"content":" ","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"fbd3e92d7bba0f5683d445bbe3a8a52a","permalink":"https://subodhvsharma.github.io/publication/concur15/","publishdate":"2015-09-01T00:00:00Z","relpermalink":"/publication/concur15/","section":"publication","summary":" ","tags":["model checking","shared memory","event structures","partial order reduction"],"title":"Unfolding-based Partial Order Reduction","type":"publication"},{"authors":["Ajitha Rajan","Subodh Sharma","Peter Schrammel","Daniel Kroening"],"categories":[],"content":"","date":1410780965,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1410780965,"objectID":"17a7759654227913cd95b3b856686f87","permalink":"https://subodhvsharma.github.io/publication/ase14/","publishdate":"2019-11-07T17:06:05+05:30","relpermalink":"/publication/ase14/","section":"publication","summary":"","tags":["testing","GPU"],"title":"Accelerated Test Execution using GPUs","type":"publication"},{"authors":["Vojtech Forejt","Daniel Kroening","Ganesh Narayanaswamy","Subodh Sharma"],"categories":[],"content":"","date":1399894286,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1399894286,"objectID":"a0aa736684d9dd880e1babdd400043af","permalink":"https://subodhvsharma.github.io/publication/fm14/","publishdate":"2019-11-07T17:01:26+05:30","relpermalink":"/publication/fm14/","section":"publication","summary":"","tags":["testing","symbolic analysis","runtime verification","mpi"],"title":"Precise Predictive Analysis for Discovering Communication Deadlocks in MPI Programs","type":"publication"},{"authors":["Subodh Sharma","Ganesh Gopalakrishnan","Greg Bronevetsky"],"categories":[],"content":"","date":1352543636,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1352543636,"objectID":"668a7e3f6e421758db68a5ae07ed7a74","permalink":"https://subodhvsharma.github.io/publication/sc12/","publishdate":"2019-11-09T16:03:56+05:30","relpermalink":"/publication/sc12/","section":"publication","summary":"","tags":["hpc","mpi","runtime verification"],"title":"MAPPED: Predictive Dynamic Analysis Tool for MPI Applications","type":"publication"},{"authors":["Subodh Sharma","Ganesh Gopalakrishnan","Greg Bronevetsky"],"categories":[],"content":"","date":1347408000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1347408000,"objectID":"a3b256224e6a4f080985ff6e92459192","permalink":"https://subodhvsharma.github.io/publication/sbmf12/","publishdate":"2019-11-09T16:00:29+05:30","relpermalink":"/publication/sbmf12/","section":"publication","summary":"","tags":["dpor","mpi","runtime verification"],"title":"A Sound Reduction of Persistent-Sets for Deadlock Detection in MPI Applications","type":"publication"},{"authors":["Subodh Sharma","Ganesh Gopalakrishnan"],"categories":[],"content":"","date":1305504000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1305504000,"objectID":"35a5e08dadd6439fcbe24bd1e7248fa2","permalink":"https://subodhvsharma.github.io/publication/ipdps11/","publishdate":"2019-11-11T12:24:33+05:30","relpermalink":"/publication/ipdps11/","section":"publication","summary":"","tags":["mpi","runtime verification"],"title":"Efficient Verification Solutions for Message Passing Systems","type":"publication"},{"authors":["Subodh Sharma","Ganesh Gopalakrishnan","Eric Mercer","Jim Holt"],"categories":[],"content":"","date":1258243200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1258243200,"objectID":"e45a09fbfdf328c5d97673bf4bf58fbf","permalink":"https://subodhvsharma.github.io/publication/fmcad09/","publishdate":"2019-12-05T13:22:23+05:30","relpermalink":"/publication/fmcad09/","section":"publication","summary":"","tags":["mcapi","runtime verification"],"title":"MCC: A runtime verification tool for MCAPI user applications","type":"publication"},{"authors":["Subodh Sharma","Ganesh Gopalakrishnan","Eric Mercer"],"categories":[],"content":"","date":1257292800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1257292800,"objectID":"3ed4b98a807e212e4ac950d04d18329e","permalink":"https://subodhvsharma.github.io/publication/hldvt09/","publishdate":"2019-12-05T14:29:09+05:30","relpermalink":"/publication/hldvt09/","section":"publication","summary":"","tags":["MCAPI","runtime verification"],"title":"Dynamic verification of Multicore Communication applications in MCAPI","type":"publication"},{"authors":["Ganesh Gopalakrishnan","Yu Yang","Sarvani S. Vakkalanka","Anh Vo","Sriram Aananthakrishnan","Grzegorz Szubzda","Geoffrey Sawaya","Jason Williams","Subodh Sharma","Michael Delisi","Simone Atzeni"],"categories":[],"content":"","date":1247097600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1247097600,"objectID":"5e7df9eb49195d5bc4af86e07c0703ac","permalink":"https://subodhvsharma.github.io/publication/padtad09/","publishdate":"2019-12-05T14:38:12+05:30","relpermalink":"/publication/padtad09/","section":"publication","summary":"","tags":[],"title":"Some resources for teaching concurrency","type":"publication"},{"authors":["Subodh Sharma","Sarvani S. Vakkalanka","Ganesh Gopalakrishnan","Robert M. Kirby","Rajeev Thakur","William Gropp"],"categories":[],"content":"","date":1220745600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1220745600,"objectID":"02be4801b8cc1b0293d4a11e70fc03c6","permalink":"https://subodhvsharma.github.io/publication/eurompi08/","publishdate":"2019-12-05T14:50:53+05:30","relpermalink":"/publication/eurompi08/","section":"publication","summary":"","tags":["mpi","runtime verification"],"title":"A Formal Approach to Detect Functionally Irrelevant Barriers in MPI Programs","type":"publication"},{"authors":["Sarvani S. Vakkalanka","Subodh Sharma","Ganesh Gopalakrishnan","Robert M. Kirby"],"categories":[],"content":"","date":1203724800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1203724800,"objectID":"3e313203415c4bd9b8d83f971c9a3ec2","permalink":"https://subodhvsharma.github.io/publication/ppopp08/","publishdate":"2019-12-05T14:47:29+05:30","relpermalink":"/publication/ppopp08/","section":"publication","summary":"","tags":[],"title":"ISP: a tool for model checking MPI programs","type":"publication"},{"authors":null,"categories":null,"content":"COL100 Frequently Asked Questions What can I expect to learn from these courses?\nThis course aims to introduce the methods of algorithmic thinking, analysis of correctness, and design of building blocks of efficient algorithmic procedures. They will also introduce the issues involved in translation of algorithmic ideas into working programs. These courses are largely programming language independent, but will introduce major programming paradigms like the functional, imperative and object-oriented.\nWhy do I have to learn the principle of mathematical induction and invariants? What good are these? I can program effectively even without these.\nCorrectness is perhaps the most cruicial aspect of program design. Through these tools you will learn how to reason about the correctness of your algorithmic designs and programs. In the words of Prof Banerjee “It is the same reason why budding young cricketers are painstakingly taught batting techniques in cricket academies before they are encouraged to bat like Virendra Sehwag. While there may be geniuses who can hit the ball consistently out of the park with total disregard for foot positions and correctness of weight transfer while hitting the ball, most aspiring cricketers would do well to learn the basics of technique.”\nHow important is to master the syntax of the programming languages used in the course?\nWhile syntax is important to correctly compile your programs, it will be sufficient for you to know just enought syntax so that the programs used by the instructors in the class can be understood. Note the course is on principles and not on the detailed features of any programming language.\nI am finding the course hard. What can I do?\nTalk to your instructor and the TAs and let them know exactly what is bothering you. Be open to their suggestions.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"508aef358d1f710236e9d159db0bd40e","permalink":"https://subodhvsharma.github.io/course/col100/faq/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/course/col100/faq/","section":"course","summary":"COL100 Frequently Asked Questions What can I expect to learn from these courses?\nThis course aims to introduce the methods of algorithmic thinking, analysis of correctness, and design of building blocks of efficient algorithmic procedures.","tags":null,"title":"","type":"course"}]