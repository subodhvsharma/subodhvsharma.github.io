[{"authors":null,"categories":null,"content":"My research is primarily in the area of software engineering and formal methods. I am interested in ensuring the reliability of parallel software via static and dynamic program analyses, model checking, and PL solutions. I am also interested in employing HPC towards the creation of scalable verification technology.\nPrior to joining the Department of Computer Science and Engineering at IIT Delhi, I worked as a post-doctoral researcher in the Systems Verification group at the University of Oxford.\nI am also associated with the VerTeCS research group@IITD. We, in addition, also run a reading group that meets weekly to discuss recent papers in top venues of PL/Verification/OS research.\n","date":1605071279,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1605071279,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://subodhvsharma.github.io/author/subodh-sharma/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/subodh-sharma/","section":"authors","summary":"My research is primarily in the area of software engineering and formal methods. I am interested in ensuring the reliability of parallel software via static and dynamic program analyses, model checking, and PL solutions.","tags":null,"title":"Subodh Sharma","type":"authors"},{"authors":null,"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1577836800,"objectID":"3015bc04d218fe76bf442af169d593b6","permalink":"https://subodhvsharma.github.io/teaching/sptopicsprivacy/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/teaching/sptopicsprivacy/","section":"teaching","summary":"Sem I (2020-21)","tags":null,"title":"COL865 Digitisation and Privacy","type":"book"},{"authors":null,"categories":null,"content":"General Information  Co-Instructor: Subodh Sharma (email: svs at cse.iitd.ac.in)  Semester: II, 2019-2020 Timings: Mon/Thur 09:30-11:00  Class Venue: LH 108 (Group 31-40)  Lab Venue: LH 502-505 \n Notice  All mails to the course instructor MUST have COL100 as the subject. Click here for downloading the latest versions of SML for windows or Linux. Most of the reading material in this course will be available in PDF formats. To view PDF files you may download Adobe Acrobat Reader.  Honour Code  All students are expected to follow the highest ethical standards. Collaborations and discussions are encouraged. However, all students are required to write up all solutions entirely on their own. Any collaboration, or help taken, must be declared. Students are encouraged to refer to books, papers and internet resources. They may even consult other individuals. However, the source must be clearly cited if any part of the solution (or even an idea) is taken from such a source. Failure to declare any help taken will be interpreted as academic misconduct.  Course Overview Click here to see what the Courses of Study booklet has to say.\nCOL100: Introduction to Computer Science is intended for First Year B. Tech. students. The course COL100 addresses on the following issues:\n Problem formulation in a precise and concise fashion and independent of language considerations. The design of an algorithm from the problem specification \u0026ndash; its correctness and analysis of its efficiency. The intermediate steps in the design of a program from an algorithm through a process of step-wise refinement. Language dependent considerations may be used in this process, but not elsewhere.  The emphasis throughout the course is in the analysis required while designing correct and efficient algorithms. The course is intended to teach a student a systematic process of design - beginning with problem formulation from an informal specification, through convincing arguments to algorithms, the analysis of their correctness and efficiency, and finally arriving at programs through a process of step-wise refinement. A programming language bias is avoided and programs are developed in both imperative and functional styles.\nThe first part of the course introduces the basics of the functional and imperative models of computation, recursive and iterative processes, and the basics of programming using higher-order functions. The programming languages used for functional and imperative programming are Standard ML and Python, respectively.\nThe second part of the course introduces data-directed programming. It emphasizes on programming with records, lists, trees, arrays and developing abstract data types.\nThe third part of the course addresses the issues in design and analysis of simple algorithms. Examples are taken from Divide and conquer, Backtracking, Numerical algorithms, Randomized algorithms and Geometric algorithms.\nReferences The primary references is going to be the Lecture Notes on Introduction to Computing developed by Prof. Subhashis Banerjee and Prof. S. Arun-Kumar.\nOther References\n  Structure and Interpretation of Computer Programs by Harold Abelson and Gerald Sussman with Julie Sussman, MIT Press, 1985.\n  How to solve it by Computer by R. J. Dromey, Prentice-Hall India EEE Series.\n  SML Tutorial, another SML Tutorial\n  Python resources:\n   http://www.greenteapress.com/thinkpython/thinkpython.pdf http://docs.python.org/tutorial/index.html http://mcsp.wartburg.edu/zelle/python/  Frequently Asked Questions COL100 Frequently asked questions (available locally within IITD).\nAdministrative Information and Grading Policy Grading Policy: Minor I - 22.5%; Minor II - 22.5%; Major - 30%; Programming assignments - 25%;\nThe riot act: As per the Institute regulations, an A grade will be awarded only over 80% and no student with less than 30% will be given a passing grade.\nAn I grade will be awarded only in the case of an illness during the major exam. A make-up exam will be scheduled at the earliest, and the I grade will be converted as soon as possible. However, please do your best to ensure that you donot break a leg or otherwise fall ill during examinations. Repeat examinations are harder by tradition.\nOther Policies:   Attendance: The Institute requires a mandatory 75% attendance for all students, which includes time lost due to illness. However this course will require 100% attendance. Please inform the instructor if for any reason you cannot attend a class. Be warned that it will be difficult to make up if you miss classes.\n  Illness: In sickness or ill-health, a Medical Certificate from the Institute Sick Bay, or a doctor from an Institute-recognised hospital is necessary, especially if you request for a make-up test. Only in the case of serious illnesses will I consider giving an extension on assignments.\n  Make-up Tests: Make-up tests (minor or major exams only) will be given only when the student furnishes a valid documentation of illness for a period including the day of the exam.\n  Late policy: Normally, I will not consider any assignments turned in late. In cases of illness I may consider giving an extension, provided the student informs me as soon as possible.\n  Class notes and Programs developed in the class  Week Monday Thursday  Supplementary Reading   Programs in class    1  Dec 30\nL1:Introduction \n Jan 2\nL2:Functions,Relations and PMI   Read Chapter 1,2 of the Lecture Notes and solve Chapter 2 exercise questions 1,2,6,9       2  Jan 6\nMore on PMI, Iterative function definitions via tail recursion \n  Jan 9\nMore examples on Tail recursion + SML Tutorial    Read section 3.1 to 3.5 and 3.9 of the Lecture Notes      3  Jan 11\nDiscussion on Assignment 1 questions, Scoping rules, Complexity Analysis\n  Jan 13\nMore on Complexity analysis: Big O, Recurrence Relations, Time and Space Complexity \n  Read section 3.8 and 3.6 of the Lecture Notes   IntSqRoot.sml,  Scoping.sml      4  Jan 20\nIterative Fibonacci, Pascal Triangle, More on invariants and recurrence relations \n  Jan 24\nRecursive formulation of counting change problem, McCarthy 91 function \n        5  Jan 27\ntechnical Completeness, Recursive formulation of Towers of Hanoi \n  Jan 30 \nMore problems on recursion \n  Solve problems on pg. 51 of Lecture Notes       6  Feb 3   Feb 5 \nMinor1 exam and solutions          7  Feb 10 Higher Order Functions, Polymorphic Functions \n  Feb 13 \nMore on Higher Order Functions, Polymorphic Functions \n  Read Chapter 5 sections 5.1 and 5.2   accumulator.sml,  root.sml     8  Feb 17 Data Abstraction: Rationals and Lists \n  Feb 20 More on Lists: length, append, reversal \n  Read sections 6.1 and 6.2 and 7.1  rationaltype.sml     9  Feb 24 Sorting using Lists: Insertion sort, Mergesort\n  Feb 27 Mergesort and Quicksort on Lists \n  Read entire Chapter 7      10  March 2 Imperative model of computation, Introduction to Loops\n  March 5 Introduction to Arrays. Sequential search on Arrays, Loop invariants \n  Read entire Chapter 4 of Lectures Notes    ","date":1577836800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1577836800,"objectID":"665aa122c764859a10d44d64dfc6dbef","permalink":"https://subodhvsharma.github.io/teaching/col100/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/teaching/col100/","section":"teaching","summary":"Sem II (2019-20)","tags":null,"title":"COL100 Introduction to Computer Science","type":"book"},{"authors":null,"categories":null,"content":"General Information  Class Timings: Mon/Wed from 18:00 hrs to 19:30 hrs Venue: Bharti 425 Instructor: Subodh Sharma (svs at cse.iitd.ac.in)\n Course Info \u0026amp; Objectives Program Synthesis has emerged as an effective approach to automatically create programs that meet user intent specified in the form of some specification. The technique is used successfully in diverse domains such as computer-aided education, software engineering, software verification etc. In this course we will discuss modern synthesis approaches by discussing foundational as well as recent research advances in this area. Topics covered in this course will include enumerative syntax-guided synthesis, counterexample-guided synthesis, stochastic synthesis and machine-learning based synthesis.\nAcademic Integrity: Plagiarism is viewed very seriously. Any case of copying (or allowing to copy) of written text or code would immediately be awarded 0 in the assignment/exam and a grade drop. Depending on the nature of plagiarism, the student could also be refered to the disciplanary committee with a fail grade. All written/programming tasks are to performed on your own, other than when group-work is explicitly specified.\nLecture Material  Sr. No. Topic  Supplementary Reading     1\t  Course modalities; Introduction       2, 3   Denali: A Goal-directed Superoptimizer     Stochastic Superoptimization (ASPLOS'13)   Equality saturation: a new approach to optimization (POPL'09)   Automatic generation of peephole superoptimizers (ASPLOS'06)   Synthesis of loop-free programs (PLDI'11)   Scaling up Superoptimization (ASPLOS'16)       4-6  Program Synthesis by Sketching     Sketching Stencils (PLDI'07)   Sketching Concurrent Data strucutures (PLDI'08)   Optimizing Synthesis with Metasketches (POPL'16)       7-8  Syntax Guided Synthesis \u0026 Search-based Program Synthesis     Synthesis Through Unification (CAV'15)       9-11  Spreadsheet Data Manipulation Using Examples     Synthesizing Data Structure Transformations from Input-Output Examples (PLDI'15)  Test-driven synthesis (PLDI'14)  Learning Syntactic Program Transformations from Examples (ICSE'17)  Scaling Enumerative Program Synthesis via Divide and Conquer (TACAS'17)   Synthesizing highly expressive SQL queries from input-output examples (PLDI'17)       12-13  From Program Verification to Program Synthesis     ICE: A robust Framework for Learning Invariants (CAV'14)   Type-and-example-directed Program Synthesis (PLDI'15)  Program Synthesis using Abstraction Refinement (POPL'18)  Program Synthesis using Conflict-Driven Learning (PLDI'18)      14-16  Stochastic Program Optimization     Data-driven Equivalence Checking (OOPSLA'13)   Finding deep compiler bugs via guided stochastic program mutation (OOPSlA'15)  Guided, stochastic model-based GUI testing of Android apps (FSE'17)  Sampling for Bayesian Program Learning (NIPS'16)  Code Completion with Statistical Language Models (PLDI'14)       17   Course Project Discussions       18-22  Neural Program Learning under Noisy I/O (ICML'17)     Nueral-guided Deductive Search for Realtime Program Synthesis from Examples (ICLR'18)   Learning Programs from Noisy Data (POPL'16)  Neuro-Symbolic Program Synthesis (ArXiv'16)  Learn \u0026 Fuzz: Machine learning for input fuzzing (ASE'17)      23-28   Course Project Presentations       ","date":1577836800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1577836800,"objectID":"def914633b3e75e201736ec92857a2ed","permalink":"https://subodhvsharma.github.io/teaching/sptopicsinpl-program-synthesis/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/teaching/sptopicsinpl-program-synthesis/","section":"teaching","summary":"Sem I (2019-20)","tags":null,"title":"COL 871 Special Topics in Programming Languages -- Program Synthesis","type":"book"},{"authors":null,"categories":null,"content":"General Information  Class Timings: Mo/Wed from 11:00 hrs to 12:00 hrs Venue: Online (MS Teams) Instructor: Subodh Sharma (svs at cse.iitd.ac.in)\n Course Description Course Description:We often find that our programs don\u0026rsquo;t run according to their specifications and even when they do the programs are large and clunky to extend or modify. This is a direct result of programmers running away from designing abstractions and not sufficiently focussing on simplicity and clarity. Could we instead work with a simple language that captures the essential aspects of program design before we decide to develop such programs? Would it not be great to not only state the software abstractions of systems succinctly, but also analyse them fully automatically akin to the continuous integration model of software development? In this course, we shall study one such specification language called Alloy and learn to model system abstractions succinctly and incrementally. We shall also learn to apply Alloy analysis tool to models which will facilitate in finding deeps flaws early in the design process without having to explicitly write a ton of unit tests.\nReference Book Software Abstractions by Daniel Jackson\nReference Links  Alloy Online Tutorial Alloy Tutorial Slides  ","date":1577836800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1577836800,"objectID":"9233b104c4491c48fdb82cef760890b3","permalink":"https://subodhvsharma.github.io/teaching/spmoduleinsoftwaresystems-software-abstractions/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/teaching/spmoduleinsoftwaresystems-software-abstractions/","section":"teaching","summary":"Sem I (2020-21)","tags":null,"title":"COV 882 Special Module in Software Systems -- Software Abstractions","type":"book"},{"authors":null,"categories":null,"content":"1. Learn the following basics of Unix:  What is a Unix terminal and how to open one? Reference: Unix Introduction What are files and processes? What is a directory and how are files grouped together in a directory structure? Reference: Unix Tutorial 1 How to list files and directories? How to create files and directories? How to copy and move files? Reference: Unix Tutorial 2 What are file access permissions and how to change them? Reference: Unix Tutorial 5  It is expected that by the end of this task, you are familiar with the usage of unix commands such as: ls, cp, rm, mv, touch, chmod, groups, passwd, cd, pwd, mkdir, rmdir \n2. Open up a browser (firefox/Chrome) and access the COL100 homepage. 3. Open an email client (webmail IIT Delhi) and login to your account. Send an email to the instructor of COL100 and then logout. 4. Learn how to use and navigate a text editor:  Type the following command on your terminal prompt: gedit \u0026amp;  Open the gedit tutorial and experiment with at least the following sections (you can experiment with all the subsections on the gedit tutorial page, if you like):  File basics: Open, close, and save files Replace text and Search for text Undo a recent action Turn on syntax highlighting    5. Learn how to work with SML programs:  Open a terminal and execute the command:sml  Follow section 3.1-3.3 of the lecture notes and code up the examples. If you wish to experiment more, then you can refer to the slide deck here from slide 5 onwards. Type the following programs in separate files and learn how to load and execute them in the interactive SML environment:  fun factorial(n) =   if (n = 0) then 1   else n*factorial(n-1);  fun gcd(m,n) =  if (n=0) then m  else gcd(n,m mod n);  ","date":1577574000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577574000,"objectID":"35c346321a7cbd32a66a0be36d8d9882","permalink":"https://subodhvsharma.github.io/teaching/col100/assign1/","publishdate":"2019-12-29T00:00:00+01:00","relpermalink":"/teaching/col100/assign1/","section":"teaching","summary":"1. Learn the following basics of Unix:  What is a Unix terminal and how to open one? Reference: Unix Introduction What are files and processes? What is a directory and how are files grouped together in a directory structure?","tags":null,"title":"Assignment 1 (non-credit)","type":"book"},{"authors":null,"categories":null,"content":"1. Spanning Tree  Implement a predicate that takes a binary relation as input (on univ set) and tests whether or not the relation is a tree. Implement a predicate that takes two binary relations as input and constrains one to be a spanning tree of the other. Use this predicate to give an example of a graph with two distinct spanning trees. Note that the versions of the predicate may be different for directed or undirected graphs. Specify both the versions. Consider a weighted undirected graph. Implement a predicate to check whether a given relation forms an MST.  2. Report  Create a report in latex clear.y explaining how you iteratively refined your model and how did Alloy help you to indentify counter-examples in your modeling process.  ","date":1577574000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577574000,"objectID":"148c4b78238b6690e4e09b876469ace7","permalink":"https://subodhvsharma.github.io/teaching/spmoduleinsoftwaresystems-software-abstractions/assign1/","publishdate":"2019-12-29T00:00:00+01:00","relpermalink":"/teaching/spmoduleinsoftwaresystems-software-abstractions/assign1/","section":"teaching","summary":"1. Spanning Tree  Implement a predicate that takes a binary relation as input (on univ set) and tests whether or not the relation is a tree. Implement a predicate that takes two binary relations as input and constrains one to be a spanning tree of the other.","tags":null,"title":"Assignment 1","type":"book"},{"authors":null,"categories":null,"content":"Develop ML functions for the following problems.  Computing factorial of a given integer using both recursive and iterative procedures. For some inputs (from the domain of Integers) the computation may not terminate. Identify such inputs and provide reason for this non-termination. Computing $x^n$. Write both recursive and iterative versions. Computing the $n^{th}$ fibonacci number. First use the algorithm given by the following functional description: $fib(1) = 1; fib(2) = 1; fib(n) = fib(n-1)+fib(n-2)$ for $n \u0026gt; 2$. Also develop iterative algorithms for the same problem. The integer square root of $n$ is the integer $k$ such that $k^2 \\leq n \u0026lt; (k+1)^2$. The integer square root can be computed using the following inductive process:  Compute the integer square root $i$ of $m = n ,\\mbox{div}, 4$ recursively. We then have that $i^2 \\leq m \u0026lt; (i+1)^2$. Since $m$ and $i$ are integers we have that $(m+1) \u0026lt;= (i+1)^2$. We thus have $(2i)^2 \\leq 4m \\leq n \u0026lt; 4m + 4 \\leq (2i + 2)^2$. Hence we have that the integer square root of $n$ is either $2i$ or $2i+1$. Write a recursive ML program corresponding to the above algorithm. Indicate the type of the function and derive the number of steps required.   Study the problem of computing perfect numbers from the the Lecture notes Example 3.13 and implement the ML program. Also study the following discussion on scope rules. You will be questioned on this problem during the demonstration.  ","date":1578006000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578006000,"objectID":"338256d9159d46d34f38ce0b463290d5","permalink":"https://subodhvsharma.github.io/teaching/col100/assign2/","publishdate":"2020-01-03T00:00:00+01:00","relpermalink":"/teaching/col100/assign2/","section":"teaching","summary":"Develop ML functions for the following problems.  Computing factorial of a given integer using both recursive and iterative procedures. For some inputs (from the domain of Integers) the computation may not terminate.","tags":null,"title":"Assignment 2 (due date Jan 17)","type":"book"},{"authors":null,"categories":null,"content":"Develop ML functions for the following problems.  Develop a higher order function and show its use in computing fastpower (from Assign1), perfect numbers(from Assign1), $e^{x}$ up to some $n$-th term, and the higher order double summation function to compute $\\Sigma_{i = a}^{b}\\Sigma_{j=c}^{d}$ Submit the solutions to the Minor1 questions that you were unable to solve in the exam. Study, understand, and code the two primality testing methods from Chapter 5 of the lecture notes. You are free to use SML or Python for this assignment.  ","date":1578006000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578006000,"objectID":"ceba9b2502bf6edda57c4f336b6e684f","permalink":"https://subodhvsharma.github.io/teaching/col100/assign3/","publishdate":"2020-01-03T00:00:00+01:00","relpermalink":"/teaching/col100/assign3/","section":"teaching","summary":"Develop ML functions for the following problems.  Develop a higher order function and show its use in computing fastpower (from Assign1), perfect numbers(from Assign1), $e^{x}$ up to some $n$-th term, and the higher order double summation function to compute $\\Sigma_{i = a}^{b}\\Sigma_{j=c}^{d}$ Submit the solutions to the Minor1 questions that you were unable to solve in the exam.","tags":null,"title":"Assignment 3","type":"book"},{"authors":["Subodh Sharma","Subhashis Banerjee"],"categories":["Security"],"content":"India is arguably the biggest deployer of digitization in public life with large public service applications (in-use or contemplated) like national identity, electronic voting, health registry, national population and voter registries, public credit registry, income and other tax registries, face recognition based access control to airports and other facilities, bluetooth based contact tracing and a national intelligence grid.\nIn this project, we are investigating the core privacy requirements in large public service applications (such as eVoting, Aadhaar, etc.). In particular the two focussed activities under the project are:\n  Design of an end-to-end individually verifiable DRE voting protocol\n  Designing a privacy-centric architecture for digital applications where the focus is to address privacy violation ex-ante rather than ex-post\n  ","date":1605071279,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605071279,"objectID":"6be4310f49efd06af39cec2660c661e8","permalink":"https://subodhvsharma.github.io/project/privacy-and-digitisation/","publishdate":"2020-11-11T10:37:59+05:30","relpermalink":"/project/privacy-and-digitisation/","section":"project","summary":"India is arguably the biggest deployer of digitization in public life with large public service applications (in-use or contemplated) like national identity, electronic voting, health registry, national population and voter registries, public credit registry, income and other tax registries, face recognition based access control to airports and other facilities, bluetooth based contact tracing and a national intelligence grid.","tags":["Security"],"title":"Privacy and Digitisation","type":"project"},{"authors":["Sanjiva Prasad","Y. Madhukar","Subodh Sharma"],"categories":[],"content":"","date":1605024537,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605024537,"objectID":"5521c9ef1b48061cc1fa8cb598efb94f","permalink":"https://subodhvsharma.github.io/publication/memocode20/","publishdate":"2020-11-10T21:38:57+05:30","relpermalink":"/publication/memocode20/","section":"publication","summary":"","tags":[],"title":"Security Types for Synchronous Data Flow Systems","type":"publication"},{"authors":["Dhriti Khanna","Rahul Purandare","Subodh Sharma"],"categories":["Concurrency"],"content":"","date":1605024267,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605024267,"objectID":"ed6e38e68185c68e1c63c0eb107c8aec","permalink":"https://subodhvsharma.github.io/publication/icsme20/","publishdate":"2020-11-10T21:34:27+05:30","relpermalink":"/publication/icsme20/","section":"publication","summary":"","tags":["Testing","Java","Symoblic Execution"],"title":"Verifying and Testing Concurrent Programs using Constraint Solver based Approaches","type":"publication"},{"authors":["Subhashis Banerjee","Subodh Sharma"],"categories":["Security"],"content":"","date":1605023693,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605023693,"objectID":"702a7abb7e83581ffd5853f68f5b1b78","permalink":"https://subodhvsharma.github.io/publication/cacm19/","publishdate":"2020-11-10T21:24:53+05:30","relpermalink":"/publication/cacm19/","section":"publication","summary":"","tags":["Aadhaar"],"title":"Privacy concerns with Aadhaar","type":"publication"},{"authors":["Subodh Sharma"],"categories":["Blockchain","Security"],"content":"IoT space is expanding at a tremendous pace and security in IoT systems has been identified as one of the critical areas which require attention. In this project we are developing a secure and trusted application layer framework for IoT systems. We, at IITD, are investigating two important subproblems in the context of security of IoTs:\n smart contract verification and automated synthesis of smart contracts. Creation of  The project is funded by the DST-JST grant and Denso Corporation. \nRA positions are available under this project  ","date":1605022751,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605022751,"objectID":"be27a3381e50118113d9f1be22cf929d","permalink":"https://subodhvsharma.github.io/project/iot-security/","publishdate":"2020-11-10T21:09:11+05:30","relpermalink":"/project/iot-security/","section":"project","summary":"IoT space is expanding at a tremendous pace and security in IoT systems has been identified as one of the critical areas which require attention. In this project we are developing a secure and trusted application layer framework for IoT systems.","tags":["Security","IoT","Blockchain"],"title":"IoT Security","type":"project"},{"authors":["Subodh Sharma"],"categories":["Concurrency"],"content":"Message passing is pervasive \u0026ndash; from inter processs communication in multicores to high performance computing, message passing plays a central role. In this project, we envison to create a\nframework to analyse message passing systems. In particular:\n  Create efficient dynamic symbolic encodings for VCs in message passing programs\n  Exploit the symmetry and parametricity to scale up the verification problem.\n  The project is funded by the DST-ECRA grant \n","date":1605013342,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605013342,"objectID":"4c47e1cfdbd2771ab107369cf71f413d","permalink":"https://subodhvsharma.github.io/project/verification-of-message-passing-systems/","publishdate":"2020-11-10T18:32:22+05:30","relpermalink":"/project/verification-of-message-passing-systems/","section":"project","summary":"Message passing is pervasive \u0026ndash; from inter processs communication in multicores to high performance computing, message passing plays a central role. In this project, we envison to create a\nframework to analyse message passing systems.","tags":["MPI","Dynamic Symbolic Analysis"],"title":"Verification of Message Passing Systems","type":"project"},{"authors":["Sanjana Singh","Divyanjali","Subodh Sharma"],"categories":["Concurrency"],"content":"Verification of parallel systems is a complex exercise. The large state spaces created due to thread interleavings complicates the verification of such parallel systems. The problem becomes even harder in case of parallel programs executed under relaxed memory models. Under this project we are investigating two directions:\n A runtime analysis that uses dynamic partial order reduction (DPOR) to verify other multi-copy atomic (oMCA) behaviors of C++11 programs A static analysis of Release-Acquire memory fragment of C11 concurrency by exploiting thread-modular abstract interpretation technique.  These projects is funded by the DST Early Career Research grant. \n","date":1605000653,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605000653,"objectID":"2d721a658f0a45f94f51d574251db48a","permalink":"https://subodhvsharma.github.io/project/verification-of-c11-concurrency/","publishdate":"2020-11-10T15:00:53+05:30","relpermalink":"/project/verification-of-c11-concurrency/","section":"project","summary":"Verification of parallel systems is a complex exercise. The large state spaces created due to thread interleavings complicates the verification of such parallel systems. The problem becomes even harder in case of parallel programs executed under relaxed memory models.","tags":["DPOR","Abstract Interpretation","Concurrency"],"title":"Verification of C11 Concurrency","type":"project"},{"authors":["Dhriti Khanna","Subodh Sharma","Cesar Rodriguez","Rahul Purandare"],"categories":null,"content":"","date":1531612800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531612800,"objectID":"b1b0e4f355ca13df17ffd2f5d2e5d92a","permalink":"https://subodhvsharma.github.io/publication/fm18/","publishdate":"2018-07-15T00:00:00Z","relpermalink":"/publication/fm18/","section":"publication","summary":"","tags":["model checking","mpi","runtime verification","symbolic analysis"],"title":"Dynamic Symbolic Verification of MPI Programs","type":"publication"},{"authors":["Sukrit Kalra","Seep Goel","Mohan Dhawan","Subodh Sharma"],"categories":null,"content":"","date":1518652800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1518652800,"objectID":"02f6a2c05a0298a403ac4328f9c4da84","permalink":"https://subodhvsharma.github.io/publication/ndss18/","publishdate":"2018-02-15T00:00:00Z","relpermalink":"/publication/ndss18/","section":"publication","summary":"","tags":["blockchain","smart contracts","model checking"],"title":"Zeus: Analyzing Safety of Smart Contracts","type":"publication"},{"authors":["Vojtech Forejt","Saurabh Joshi","Daniel Kroening","Ganesh Narayanaswamy","Subodh Sharma"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   -- ","date":1488326400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1488326400,"objectID":"a0a98a4e1375674c25b6cd5870303f22","permalink":"https://subodhvsharma.github.io/publication/toplas17/","publishdate":"2017-03-01T00:00:00Z","relpermalink":"/publication/toplas17/","section":"publication","summary":"Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.","tags":["mpi","deadlocks","symbolic analysis"],"title":"Precise Predictive Analysis for Discovering Communication Deadlocks in MPI Programs","type":"publication"},{"authors":["Sukrit Kalra","Ayush Goel","Dhriti Khanna","Mohan Dhawan","Subodh Sharma","Rahul Purandare"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   -- ","date":1478995200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1478995200,"objectID":"d7c81a47c50a7735571fae68b674e892","permalink":"https://subodhvsharma.github.io/publication/fse16/","publishdate":"2016-11-13T00:00:00Z","relpermalink":"/publication/fse16/","section":"publication","summary":"Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.","tags":["program analysis","testing","binary instrumentation"],"title":"POLLUX: Safely Upgrading Dependent Application Libraries","type":"publication"},{"authors":["Chinmay Narayan","Subodh Sharma","Shibashis Guha","S. Arun-Kumar"],"categories":[],"content":"","date":1468713600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1468713600,"objectID":"a49f7f5dacfd419f561a33faf21e22c7","permalink":"https://subodhvsharma.github.io/publication/tase16/","publishdate":"2019-11-07T16:34:50+05:30","relpermalink":"/publication/tase16/","section":"publication","summary":"","tags":["trace partitioning"],"title":"From Traces to Proofs: Proving Concurrent Programs Safe","type":"publication"},{"authors":["Chinmay Narayan","Subodh Sharma","S. Arun-Kumar"],"categories":[],"content":"","date":1451606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1451606400,"objectID":"3cf1b4d2c73851fbc25566af021f72e6","permalink":"https://subodhvsharma.github.io/publication/arxiv16-concurrencyproofs/","publishdate":"2019-11-07T16:48:05+05:30","relpermalink":"/publication/arxiv16-concurrencyproofs/","section":"publication","summary":"","tags":["relaxed memory","trace partitioning","verification"],"title":"Efficient Verification of Concurrent Programs over TSO Memory Model","type":"publication"},{"authors":["Cesar Rodriguez","Marcelo Sousa","Subodh Sharma","Daniel Kroening"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   -- ","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"fbd3e92d7bba0f5683d445bbe3a8a52a","permalink":"https://subodhvsharma.github.io/publication/concur15/","publishdate":"2015-09-01T00:00:00Z","relpermalink":"/publication/concur15/","section":"publication","summary":"Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.","tags":["model checking","shared memory","event structures","partial order reduction"],"title":"Unfolding-based Partial Order Reduction","type":"publication"},{"authors":["Ajitha Rajan","Subodh Sharma","Peter Schrammel","Daniel Kroening"],"categories":[],"content":"","date":1410780965,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1410780965,"objectID":"17a7759654227913cd95b3b856686f87","permalink":"https://subodhvsharma.github.io/publication/ase14/","publishdate":"2019-11-07T17:06:05+05:30","relpermalink":"/publication/ase14/","section":"publication","summary":"","tags":["testing","GPU"],"title":"Accelerated Test Execution using GPUs","type":"publication"},{"authors":["Vojtech Forejt","Daniel Kroening","Ganesh Narayanaswamy","Subodh Sharma"],"categories":[],"content":"","date":1399894286,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1399894286,"objectID":"a0aa736684d9dd880e1babdd400043af","permalink":"https://subodhvsharma.github.io/publication/fm14/","publishdate":"2019-11-07T17:01:26+05:30","relpermalink":"/publication/fm14/","section":"publication","summary":"","tags":["testing","symbolic analysis","runtime verification","mpi"],"title":"Precise Predictive Analysis for Discovering Communication Deadlocks in MPI Programs","type":"publication"},{"authors":["Subodh Sharma","Ganesh Gopalakrishnan","Greg Bronevetsky"],"categories":[],"content":"","date":1352543636,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1352543636,"objectID":"668a7e3f6e421758db68a5ae07ed7a74","permalink":"https://subodhvsharma.github.io/publication/sc12/","publishdate":"2019-11-09T16:03:56+05:30","relpermalink":"/publication/sc12/","section":"publication","summary":"","tags":["hpc","mpi","runtime verification"],"title":"MAPPED: Predictive Dynamic Analysis Tool for MPI Applications","type":"publication"},{"authors":["Subodh Sharma","Ganesh Gopalakrishnan","Greg Bronevetsky"],"categories":[],"content":"","date":1347408000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1347408000,"objectID":"a3b256224e6a4f080985ff6e92459192","permalink":"https://subodhvsharma.github.io/publication/sbmf12/","publishdate":"2019-11-09T16:00:29+05:30","relpermalink":"/publication/sbmf12/","section":"publication","summary":"","tags":["dpor","mpi","runtime verification"],"title":"A Sound Reduction of Persistent-Sets for Deadlock Detection in MPI Applications","type":"publication"},{"authors":["Subodh Sharma","Ganesh Gopalakrishnan"],"categories":[],"content":"","date":1305504000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1305504000,"objectID":"35a5e08dadd6439fcbe24bd1e7248fa2","permalink":"https://subodhvsharma.github.io/publication/ipdps11/","publishdate":"2019-11-11T12:24:33+05:30","relpermalink":"/publication/ipdps11/","section":"publication","summary":"","tags":["mpi","runtime verification"],"title":"Efficient Verification Solutions for Message Passing Systems","type":"publication"},{"authors":["Subodh Sharma","Ganesh Gopalakrishnan","Eric Mercer","Jim Holt"],"categories":[],"content":"","date":1258243200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1258243200,"objectID":"e45a09fbfdf328c5d97673bf4bf58fbf","permalink":"https://subodhvsharma.github.io/publication/fmcad09/","publishdate":"2019-12-05T13:22:23+05:30","relpermalink":"/publication/fmcad09/","section":"publication","summary":"","tags":["mcapi","runtime verification"],"title":"MCC: A runtime verification tool for MCAPI user applications","type":"publication"},{"authors":["Subodh Sharma","Ganesh Gopalakrishnan","Eric Mercer"],"categories":[],"content":"","date":1257292800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1257292800,"objectID":"3ed4b98a807e212e4ac950d04d18329e","permalink":"https://subodhvsharma.github.io/publication/hldvt09/","publishdate":"2019-12-05T14:29:09+05:30","relpermalink":"/publication/hldvt09/","section":"publication","summary":"","tags":["MCAPI","runtime verification"],"title":"Dynamic verification of Multicore Communication applications in MCAPI","type":"publication"},{"authors":["Ganesh Gopalakrishnan","Yu Yang","Sarvani S. Vakkalanka","Anh Vo","Sriram Aananthakrishnan","Grzegorz Szubzda","Geoffrey Sawaya","Jason Williams","Subodh Sharma","Michael Delisi","Simone Atzeni"],"categories":[],"content":"","date":1247097600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1247097600,"objectID":"5e7df9eb49195d5bc4af86e07c0703ac","permalink":"https://subodhvsharma.github.io/publication/padtad09/","publishdate":"2019-12-05T14:38:12+05:30","relpermalink":"/publication/padtad09/","section":"publication","summary":"","tags":[],"title":"Some resources for teaching concurrency","type":"publication"},{"authors":["Subodh Sharma","Sarvani S. Vakkalanka","Ganesh Gopalakrishnan","Robert M. Kirby","Rajeev Thakur","William Gropp"],"categories":[],"content":"","date":1220745600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1220745600,"objectID":"02be4801b8cc1b0293d4a11e70fc03c6","permalink":"https://subodhvsharma.github.io/publication/eurompi08/","publishdate":"2019-12-05T14:50:53+05:30","relpermalink":"/publication/eurompi08/","section":"publication","summary":"","tags":["mpi","runtime verification"],"title":"A Formal Approach to Detect Functionally Irrelevant Barriers in MPI Programs","type":"publication"},{"authors":["Sarvani S. Vakkalanka","Subodh Sharma","Ganesh Gopalakrishnan","Robert M. Kirby"],"categories":[],"content":"","date":1203724800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1203724800,"objectID":"3e313203415c4bd9b8d83f971c9a3ec2","permalink":"https://subodhvsharma.github.io/publication/ppopp08/","publishdate":"2019-12-05T14:47:29+05:30","relpermalink":"/publication/ppopp08/","section":"publication","summary":"","tags":[],"title":"ISP: a tool for model checking MPI programs","type":"publication"}]