<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>COL100 Introduction to Computer Science | Academic</title>
    <link>https://subodhvsharma.github.io/course/col100/</link>
      <atom:link href="https://subodhvsharma.github.io/course/col100/index.xml" rel="self" type="application/rss+xml" />
    <description>COL100 Introduction to Computer Science</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 14 Nov 2022 00:00:00 +0100</lastBuildDate>
    <image>
      <url>https://subodhvsharma.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>COL100 Introduction to Computer Science</title>
      <link>https://subodhvsharma.github.io/course/col100/</link>
    </image>
    
    <item>
      <title>Assignment 3 -- More on Recursion</title>
      <link>https://subodhvsharma.github.io/course/col100/assign3/</link>
      <pubDate>Mon, 14 Nov 2022 00:00:00 +0100</pubDate>
      <guid>https://subodhvsharma.github.io/course/col100/assign3/</guid>
      <description>&lt;h4 id=&#34;more-on-recursion&#34;&gt;More on Recursion&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Two frogs are sitting at bottom of a flight of $10$ steps and debating in how many ways can they jump up the stairs. They can jump one, two or three steps at a time. For example they can cover the 10 steps by jumping $(3, 3, 3 , 1)$ or $(2 ,3, 3, 2)$ or other suitable combinations. Their mathematics is not very strong (being frogs) and they approach you for help. Develop an &lt;em&gt;efficient&lt;/em&gt; Python function that provides a general solution (not only for $10$ but for general $n$ steps). Note that $(3,3,3,1)$ is distinct from $(1,3,3,3)$ and likewise and that we only want to count the number of solutions and not report the solutions. Perform the timing analysis of your solution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write a Python program to count the number of ways for a rook to move from the southwest corner of a $p \times q$ chessboard to the northeast corner by moving one square at a time eastward or northward only. Note that rook is a chess piece that can move horizontally and vertically on a chess board. Give a recursive formulation and do not use a formula.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Develop a higher order function and show its use in computing
fastpower (from Assign1), perfect numbers, $e^{x}$ up
to some $n$-th term, and the higher order double summation function
to compute $\Sigma_{i = a}^{b}\Sigma_{j=c}^{d}$. Provide proof of correctness and timing analysis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define a higher order composition function &lt;code&gt;compose(f, g,x)&lt;/code&gt; in Python and use it to implement a function &lt;code&gt;repeat(f,n)&lt;/code&gt; to compute $f^n(x)$.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Assignment 2 -- Introduction to Python</title>
      <link>https://subodhvsharma.github.io/course/col100/assign2/</link>
      <pubDate>Sun, 06 Nov 2022 00:00:00 +0100</pubDate>
      <guid>https://subodhvsharma.github.io/course/col100/assign2/</guid>
      <description>&lt;h4 id=&#34;basic-python&#34;&gt;Basic Python&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learn how to perform simple operations such as exponents (Eg:$2^3$), remainder, integer division. Also understand the order of such operations that Python enforces. Run (5-1)*(7+1)/(3-1) in Python interpreter and indicate the order of evaluation of expressions (Note: an expression consists of values and operators such that
they can always evaluate to a single value).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learn how values of common datatypes such as &lt;code&gt;int, floats, string,&lt;/code&gt; and &lt;code&gt;bool&lt;/code&gt; are specified in Python by using the interpreter. Interpret the results of the following expressions: (i) &lt;code&gt;&#39;Python&#39; + &#39;Rocks&#39;&lt;/code&gt; and (ii) &lt;code&gt;&#39;Python&#39; + 42&lt;/code&gt;. Experiment with other
combinations of operators and types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variables are named locations in computer&amp;rsquo;s memory that can store
a single value. If you want to use the result of an evaluated expression later in your program, you can save it inside a variable.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://subodhvsharma.github.io/col100-classnotes-2022/Valid-Invalid-Vars.png&#34; alt=&#34;Valid and Invalid Variable Names&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learn the use of &lt;code&gt;print()&lt;/code&gt; and &lt;code&gt;input()&lt;/code&gt; functions. &lt;br&gt;
Write a python program that takes as input a float radius of a circle and prints its perimeter and area.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;format()&lt;/code&gt; function to print the value of $\pi$ rounded&lt;br&gt;
to 14 digits.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(Conditions)&lt;/strong&gt; Learn python&amp;rsquo;s way of specifying conditional&lt;br&gt;
expressions (&lt;code&gt;if-else&lt;/code&gt;, &lt;code&gt;if-elif-else&lt;/code&gt;). Given any integer $y$ denoting a year in the Christian calendar, we would like to determine whether it is a leap year. A leap year is one which is divisible by $4$. Also not all years divisible by $4$ are leap years. Century years are leap only if they are divisible by $400$. So we define a boolean function leap which yields a value “true” if the year $y$ is a leap year and false otherwise. Write a python program for the problem above.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show in the interpret the output for the following expressions when evaluated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(5 &amp;gt; 4) and (3 == 5)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not (5 &amp;gt; 4)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(5 &amp;gt; 4) or (3 == 5)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not ((5 &amp;gt; 4) or (3 == 5))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(True and True) and (True == False)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(not False) or (not True)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;basic-algorithm-design-and-python-programming&#34;&gt;Basic Algorithm Design and Python Programming&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Computing factorial of a given integer using recursive procedure which is &lt;em&gt;technically complete&lt;/em&gt;. For some inputs (from the domain of Integers) the computation may not terminate. Identify such inputs and provide reason for this non-termination.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Computing $x^n$ through a recursive procedure. Provide correctness and time complexity arguments as comments in the program. Further
design and implement a faster recursive version of the power function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;challenge-question&#34;&gt;Challenge Question&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The integer square root of $n$ is the integer $k$ such that
$k^2 \leq n &amp;lt; (k+1)^2$.  The integer square root can be computed
using the following inductive process:
&lt;ul&gt;
&lt;li&gt;Compute the integer square root $i$ of $m = n ,\mbox{div}, 4$
recursively.  We then have that $i^2 \leq m &amp;lt; (i+1)^2$.&lt;/li&gt;
&lt;li&gt;Since $m$ and $i$ are integers we have that $(m+1) &amp;lt;= (i+1)^2$.
We thus have $(2i)^2 \leq 4m \leq n &amp;lt; 4m + 4 \leq (2i + 2)^2$.
Hence we have that the integer square root of $n$ is either
$2i$ or $2i+1$.&lt;/li&gt;
&lt;li&gt;Write a recursive python program corresponding to the above &lt;br&gt;
algorithm.&lt;/li&gt;
&lt;li&gt;Derive the number of steps required.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Assignment 1</title>
      <link>https://subodhvsharma.github.io/course/col100/assign1/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0100</pubDate>
      <guid>https://subodhvsharma.github.io/course/col100/assign1/</guid>
      <description>&lt;h4 id=&#34;1-learn-the-following-basics-of-unix&#34;&gt;1. Learn the following basics of Unix:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;What is a Unix terminal and how to open one? Reference: &lt;a href=&#34;http://www.ee.surrey.ac.uk/Teaching/Unix/unixintro.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unix Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What are files and processes? What is a directory and how are files grouped together in a directory structure? Reference: &lt;a href=&#34;http://www.ee.surrey.ac.uk/Teaching/Unix/unix1.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unix Tutorial 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How to list files and directories?  How to create files and directories? How to copy and move files? Reference: &lt;a href=&#34;http://www.ee.surrey.ac.uk/Teaching/Unix/unix2.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unix Tutorial 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What are file access permissions and how to change them? Reference: &lt;a href=&#34;http://www.ee.surrey.ac.uk/Teaching/Unix/unix5.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unix Tutorial 5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:Brown&#34;&gt; &lt;strong&gt;It is expected that by the end of this task, you are familiar with the usage of unix commands such as: &lt;code&gt;ls, cp, rm, mv, touch, chmod, groups, passwd, cd, pwd, mkdir, cat, find&lt;/code&gt;&lt;/strong&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-open-up-a-browser-firefoxchrome-and-access-the-col100-homepage&#34;&gt;2. Open up a browser (firefox/Chrome) and access the COL100 homepage.&lt;/h4&gt;
&lt;h4 id=&#34;3-open-an-email-client-webmail-iit-delhi-and-login-to-your-account-send-an-email-to-the-instructor-of-col100-and-then-logout&#34;&gt;3. Open an email client (webmail IIT Delhi) and login to your account. Send an email to the instructor of COL100 and then logout.&lt;/h4&gt;
&lt;h4 id=&#34;4-learn-how-to-use-and-navigate-a-text-editor&#34;&gt;4. Learn how to use and navigate a text editor:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Type the following command on your terminal prompt: &lt;span style=&#34;color:DarkBlue&#34;&gt; &lt;strong&gt;&lt;code&gt;gedit &amp;amp;&lt;/code&gt;&lt;/strong&gt; &lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Open the &lt;a href=&#34;https://help.gnome.org/users/gedit/stable/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gedit tutorial&lt;/a&gt; and experiment with at least the following sections (you can experiment with all the subsections on the gedit tutorial page, if you like):
&lt;ul&gt;
&lt;li&gt;File basics: Open, close, and save files&lt;/li&gt;
&lt;li&gt;Replace text and Search for text&lt;/li&gt;
&lt;li&gt;Undo a recent action&lt;/li&gt;
&lt;li&gt;Turn on syntax highlighting by selecting gedit -&amp;gt; Preferences -&amp;gt; Plugins -&amp;gt; Python Console&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://subodhvsharma.github.io/course/col100/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://subodhvsharma.github.io/course/col100/faq/</guid>
      <description>&lt;h1 id=&#34;col100-frequently-asked-questions&#34;&gt;COL100 Frequently Asked Questions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;What can I expect to learn from these courses?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This course aims to introduce the methods of algorithmic thinking, analysis of correctness, and design of building blocks of efficient algorithmic procedures. They will also introduce the issues involved in translation of algorithmic ideas into working programs. These courses are largely programming language independent, but will introduce major programming paradigms like the functional, imperative and object-oriented.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Why do I have to learn &lt;code&gt;the principle of mathematical induction&lt;/code&gt; and &lt;code&gt;invariants&lt;/code&gt;? What good are these? I can program effectively even without these.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Correctness is perhaps the most cruicial aspect of program design. Through these tools you will learn how to reason about the correctness of your algorithmic designs and programs. In the words of Prof Banerjee &amp;ldquo;It is the same reason why budding young cricketers are painstakingly taught batting techniques in cricket academies before they are encouraged to bat like Virendra Sehwag. While there may be geniuses who can hit the ball consistently out of the park with total disregard for foot positions and correctness of weight transfer while hitting the ball, most aspiring cricketers would do well to learn the basics of technique.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;How important is to master the syntax of the programming languages used in the course?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While syntax is important to correctly compile your programs, it will be sufficient for you to know just enought syntax so that the programs used by the instructors in the class can be understood. Note the course is on principles and not on the detailed features of any programming language.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;I am finding the course hard. What can I do?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Talk to your instructor and the TAs and let them know exactly what is bothering you. Be open to their suggestions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
