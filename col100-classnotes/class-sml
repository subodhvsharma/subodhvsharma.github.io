fun rev (L) =
    case L of
    	 [] => []
       | x::xs => rev (xs) @ (x::[]);

(*
len (L ) = n-i
len (M)  = i
rev(M) @ L = L0
*)
fun rev1 (L) =
    let
	fun rev_iter(L, M) =
	    case L of
	    	 [] => M
		| x::xs => rev_iter (xs, x::M)
    in
    rev_iter(L,[])
    end;
(*
[1, 4, 3, 2, 5, 9, 4, 2, 1]
[1, 1, 2, 2, 3, 4, 4, 5, 9]
fn : a x aList-Sorted -> aListSorted
*)

fun insert (a, []) = [a]
   | insert (a, x::xs) = if a < x then a::x::xs
     	    	         else x::insert(a, xs);

fun merge1 (L1, L2) =
    let
	fun merge_it(a, b, c) =
	    if (a = []) then c@ b
	    else if (b = []) then c@a
	    	 else
	     let
		val x::xs = a
		val y::ys = b
             in
	       if (x <= y) then merge_it(xs, y::ys, c@[x])
	       else merge_it (x::xs, ys, c@[y])
	     end
     in
     merge_it(L1, L2, [])
     end;



(*insertion sort

fn: aList -> aList-Sorted
Worst case complexity: T(n) = T(n-1) + n = O(n^2)
Best case complexity: O(n)
PMI proof:
Base case is trivial
I.H.
I.S. 
*)

fun inSort (L) =
    case L of
    	 [] => []
	| x::xs =>  insert (x, inSort(xs)); 

(*
merge_sort (L)
fn: aList -> aList-Sorted
split (L) = L1, L2
10^18 steps, 10^9 seconds

*)


(*
fn : aList-Sorted x aList-Sorted -> aList-Sorted
*)
(* time complexity:O(|L1|+|L2|) *)
fun merge ([], L2) = L2
   | merge (L1, []) = L1
   | merge (x::xs, y::ys) = if x <= y then x::merge (xs, y::ys)
     	   	   	    else y::merge (x::xs, ys);
(* Time complexity: O(n)*)
fun split(ls) =
    case ls of
        [] => ([], [])
       |[x] => ([x], [])
       | x::y::xs =>
       	 	  let val (p1, p2) = split (xs) in
       	 	  (x::p1, y::p2)
		  end;	  
(*
	n
     n/2  n/2  --- n+n
   n/4 n/4  n/4 n/4 --- n+n

T(N) := 2T(N/2) + 2n = O(n logn + kn) = O(nlogn) 
*)
fun msort(ls) =
    case ls of
    	 [] => []
	| [x] => [x] 
	| (x::xs) =>
	  	let
		   val (l1, l2) = split (ls)
		in
		  merge (msort(l1), msort(l2))
		end;  
(*
	10^9  I.S: O(10^18) 1 op /10^-9 === 10^9 seconds ~ 32 years
	 10^9 ~ 27. 10^9 ~ 27 seconds 
PMI:
base case is trivial
I.H.
*)

(*
Quick Sort:
A partition or a pivot  "x":
[  all x' <=x     , x, all x' > x    ]
*)
fun partition (pivot, ls) =
    case ls of 
    	 [] => ([], [])
	| x::xs =>
	  	let val (p1, p2) = partition (pivot, xs) in
	  	if (x <= pivot) then (x::p1,p2)
		else (p1, x::p2)
		end;
fun qsort(ls) =
    case ls of
    	 [] => []
	| [x] => [x]
	| x::xs =>
	     let
		val dummy = Timer.startRealTimer()
		val (lesser, larger) = partition (x,xs)
	     in
		qsort(lesser)@[x]@qsort(larger);
		Timer.checkRealTimer(dummy)
	    end;	