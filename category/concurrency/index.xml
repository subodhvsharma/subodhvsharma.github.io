<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concurrency | Academic</title>
    <link>https://subodhvsharma.github.io/category/concurrency/</link>
      <atom:link href="https://subodhvsharma.github.io/category/concurrency/index.xml" rel="self" type="application/rss+xml" />
    <description>Concurrency</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2019 SubodhSharma</copyright><lastBuildDate>Sun, 11 Apr 2021 21:34:27 +0530</lastBuildDate>
    <image>
      <url>https://subodhvsharma.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Concurrency</title>
      <link>https://subodhvsharma.github.io/category/concurrency/</link>
    </image>
    
    <item>
      <title>Synthesizing Multi-threaded Tests from Sequential Traces to Detect Communication Deadlocks</title>
      <link>https://subodhvsharma.github.io/publication/icst21/</link>
      <pubDate>Sun, 11 Apr 2021 21:34:27 +0530</pubDate>
      <guid>https://subodhvsharma.github.io/publication/icst21/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Verifying and Testing Concurrent Programs using Constraint Solver based Approaches</title>
      <link>https://subodhvsharma.github.io/publication/icsme20/</link>
      <pubDate>Tue, 10 Nov 2020 21:34:27 +0530</pubDate>
      <guid>https://subodhvsharma.github.io/publication/icsme20/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Verification of Message Passing Systems</title>
      <link>https://subodhvsharma.github.io/project/verification-of-message-passing-systems/</link>
      <pubDate>Tue, 10 Nov 2020 18:32:22 +0530</pubDate>
      <guid>https://subodhvsharma.github.io/project/verification-of-message-passing-systems/</guid>
      <description>&lt;p&gt;Message passing is pervasive &amp;ndash; from inter processs communication in multicores to high performance computing, message passing plays a central role. In this project, we envison to create a&lt;br&gt;
framework to analyse message passing systems. In particular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create efficient dynamic symbolic encodings for VCs in message passing programs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exploit the symmetry and parametricity to scale up the verification problem.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:slateblue&#34;&gt;The project is funded by the DST-ECRA grant &lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Verification of C11 Concurrency</title>
      <link>https://subodhvsharma.github.io/project/verification-of-c11-concurrency/</link>
      <pubDate>Tue, 10 Nov 2020 15:00:53 +0530</pubDate>
      <guid>https://subodhvsharma.github.io/project/verification-of-c11-concurrency/</guid>
      <description>&lt;p&gt;Verification of parallel systems is a complex exercise. The large state spaces created due to thread interleavings complicates the verification of such parallel systems. The problem becomes even harder in case of parallel programs executed under relaxed memory models. Under this project we are investigating two directions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A runtime analysis that uses dynamic partial order reduction (DPOR) to verify other multi-copy atomic (oMCA) behaviors of C++11 programs&lt;/li&gt;
&lt;li&gt;A static analysis of &lt;em&gt;Release-Acquire&lt;/em&gt; memory fragment of C11 concurrency by exploiting thread-modular abstract interpretation technique.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:slateblue&#34;&gt; These projects is funded by the DST Early Career Research grant.  &lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
